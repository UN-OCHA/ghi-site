diff --git a/seckit.api.php b/seckit.api.php
new file mode 100644
index 0000000000000000000000000000000000000000..bcad867858e48681f51ad0af14752ba86c195b03
--- /dev/null
+++ b/seckit.api.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Security Kit module.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Alter the Security Kit settings.
+ *
+ * @param array $options
+ *   An array of runtime options.
+ *
+ * @see \Drupal\seckit\EventSubscriber\SecKitEventSubscriber::getSeckitConfig
+ */
+function hook_seckit_options_alter(array &$options) {
+  // Add a new directive to the "Content-Security-Policy" header.
+  $options['seckit_xss']['csp']['script-src-attr'] = "'none'";
+  // Append a new policy to the "script-src" directive.
+  $options['seckit_xss']['csp']['script-src'] .= " https://*.example.com";
+  // Update the noscript message in the JavaScript-based protection setting.
+  $options['seckit_clickjacking']['noscript_message'] = "Sorry, you need to enable JavaScript to visit this website!";
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/seckit.post_update.php b/seckit.post_update.php
new file mode 100644
index 0000000000000000000000000000000000000000..c50c2d44b8ee560ba57300062ee4d1f677723da9
--- /dev/null
+++ b/seckit.post_update.php
@@ -0,0 +1,12 @@
+<?php
+
+/**
+ * @file
+ * Post update functions for the seckit module.
+ */
+
+/**
+ * Cache rebuild for new parameter in SecKitEventSubscriber::__construct.
+ */
+function seckit_post_update_parameter_added_event_subscriber() {
+}
diff --git a/seckit.services.yml b/seckit.services.yml
index 0668ced224b39ee633b6ba51260438e503f88716..942ab8ac2014deba2482249780e1f01a793845a0 100644
--- a/seckit.services.yml
+++ b/seckit.services.yml
@@ -1,7 +1,7 @@
 services:
   seckit.subscriber:
     class: Drupal\seckit\EventSubscriber\SecKitEventSubscriber
-    arguments: ['@logger.channel.seckit', '@config.factory', '@extension.list.module']
+    arguments: ['@logger.channel.seckit', '@config.factory', '@extension.list.module', '@module_handler']
     tags:
       - { name: event_subscriber }
   logger.channel.seckit:
diff --git a/src/EventSubscriber/SecKitEventSubscriber.php b/src/EventSubscriber/SecKitEventSubscriber.php
index 8870d1abc77006fd38e2c4d6d8f14d08b0f5a581..29099bbcc44c482e2258bafd05b2934108c5ebc6 100644
--- a/src/EventSubscriber/SecKitEventSubscriber.php
+++ b/src/EventSubscriber/SecKitEventSubscriber.php
@@ -2,10 +2,13 @@
 
 namespace Drupal\seckit\EventSubscriber;
 
+use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\seckit\SeckitInterface;
 use Psr\Log\LoggerInterface;
@@ -23,9 +26,9 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
   use StringTranslationTrait;
 
   /**
-   * The config factory.
+   * The config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var \Drupal\Core\Config\ImmutableConfig
    */
   protected $config;
 
@@ -50,6 +53,13 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
    */
   protected $logger;
 
+  /**
+   * Module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
   /**
    * The module extension list.
    *
@@ -66,11 +76,14 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
    *   The config factory.
    * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list_module
    *   The module extension list.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
    */
-  public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, ModuleExtensionList $extension_list_module) {
+  public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, ModuleExtensionList $extension_list_module, ModuleHandlerInterface $module_handler) {
     $this->logger = $logger;
     $this->config = $config_factory->get('seckit.settings');
     $this->moduleExtensionList = $extension_list_module;
+    $this->moduleHandler = $module_handler;
   }
 
   /**
@@ -81,6 +94,7 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
    */
   public function onKernelRequest(RequestEvent $event) {
     $this->request = $event->getRequest();
+    $this->config = $this->getSeckitConfig();
 
     // Execute necessary functions.
     if ($this->config->get('seckit_csrf.origin')) {
@@ -96,6 +110,7 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
    */
   public function onKernelResponse(ResponseEvent $event) {
     $this->response = $event->getResponse();
+    $this->config = $this->getSeckitConfig();
 
     // Execute necessary functions.
     if ($this->config->get('seckit_xss.csp.checkbox')) {
@@ -206,103 +221,87 @@ class SecKitEventSubscriber implements EventSubscriberInterface {
    * Based on specification available at http://www.w3.org/TR/CSP/
    */
   public function seckitCsp() {
-    // Get default/set options.
-    $csp_vendor_prefix_x = $this->config->get('seckit_xss.csp.vendor-prefix.x');
-    $csp_vendor_prefix_webkit = $this->config->get('seckit_xss.csp.vendor-prefix.webkit');
-    $csp_report_only = $this->config->get('seckit_xss.csp.report-only');
-    $csp_default_src = $this->config->get('seckit_xss.csp.default-src');
-    $csp_script_src = $this->config->get('seckit_xss.csp.script-src');
-    $csp_object_src = $this->config->get('seckit_xss.csp.object-src');
-    $csp_img_src = $this->config->get('seckit_xss.csp.img-src');
-    $csp_media_src = $this->config->get('seckit_xss.csp.media-src');
-    $csp_style_src = $this->config->get('seckit_xss.csp.style-src');
-    $csp_frame_src = $this->config->get('seckit_xss.csp.frame-src');
-    $csp_frame_ancestors = $this->config->get('seckit_xss.csp.frame-ancestors');
-    $csp_child_src = $this->config->get('seckit_xss.csp.child-src');
-    $csp_font_src = $this->config->get('seckit_xss.csp.font-src');
-    $csp_connect_src = $this->config->get('seckit_xss.csp.connect-src');
-    $csp_report_uri = $this->config->get('seckit_xss.csp.report-uri');
-    $csp_upgrade_req = $this->config->get('seckit_xss.csp.upgrade-req');
-    // $csp_policy_uri = $this->config->get('seckit_xss.csp.policy-uri');
-    // Prepare directives.
+    $options = $this->config->get('seckit_xss.csp');
     $directives = [];
 
-    // If policy-uri is declared, no other directives are permitted.
-    /* if ($csp_report_only) {
-    $directives = "policy-uri " . base_path() . $csp_report_only;
-    } */
-    // Otherwise prepare directives.
-    // else {.
-    if ($csp_default_src) {
-      $directives[] = "default-src $csp_default_src";
-    }
-    if ($csp_script_src) {
-      $directives[] = "script-src $csp_script_src";
-    }
-    if ($csp_object_src) {
-      $directives[] = "object-src $csp_object_src";
-    }
-    if ($csp_style_src) {
-      $directives[] = "style-src $csp_style_src";
-    }
-    if ($csp_img_src) {
-      $directives[] = "img-src $csp_img_src";
-    }
-    if ($csp_media_src) {
-      $directives[] = "media-src $csp_media_src";
-    }
-    if ($csp_frame_src) {
-      $directives[] = "frame-src $csp_frame_src";
-    }
-    if ($csp_frame_ancestors) {
-      $directives[] = "frame-ancestors $csp_frame_ancestors";
-    }
-    if ($csp_child_src) {
-      $directives[] = "child-src $csp_child_src";
-    }
-    if ($csp_font_src) {
-      $directives[] = "font-src $csp_font_src";
+    // Iterate through the options to process special cases and CSP directives.
+    // All the special cases will be present in the $options array.
+    foreach ($options as $option_key => $option_value) {
+      switch ($option_key) {
+        case 'checkbox':
+          // This option only determined whether this function was called.
+          break;
+
+        case 'report-only':
+          $csp_report_only = $option_value;
+          break;
+
+        case 'vendor-prefix':
+          $csp_vendor_prefix_x = $option_value['x'];
+          $csp_vendor_prefix_webkit = $option_value['webkit'];
+          break;
+
+        case 'policy-uri':
+          // Policy URIs aren't supported currently.
+          break;
+
+        case 'report-uri':
+          if ($option_value) {
+            $base_path = '';
+            $csp_report_uri = $option_value;
+            if (!UrlHelper::isExternal($csp_report_uri)) {
+              // Strip leading slashes from internal paths to prevent them
+              // becoming external URLs without protocol. /report-csp-violation
+              // should not be turned into //report-csp-violation.
+              $csp_report_uri = ltrim($option_value, '/');
+              $base_path = base_path();
+            }
+            $directives[$option_key] = "report-uri " . $base_path . $csp_report_uri;
+          }
+          break;
+
+        case 'upgrade-req':
+          if ($option_value) {
+            $directives['upgrade-insecure-requests'] = 'upgrade-insecure-requests';
+          }
+          break;
+
+        default:
+          // All other entries represent verbatim CSP directives.
+          // Custom directives can be added via hook_seckit_options_alter().
+          if ($option_value) {
+            $directives[$option_key] = $option_key . ' ' . $option_value;
+          }
+          break;
+      }
     }
-    if ($csp_connect_src) {
-      $directives[] = "connect-src $csp_connect_src";
+
+    // Remove empty directives and merge.
+    $directives = implode('; ', array_filter($directives));
+
+    // Early return if no directives were prepared.
+    if (!$directives) {
+      return;
     }
-    if ($csp_report_uri) {
-      $base_path = '';
-      if (!UrlHelper::isExternal($csp_report_uri)) {
-        // Strip leading slashes from internal paths to prevent them becoming
-        // external URLs without protocol. /report-csp-violation should not be
-        // turned into //report-csp-violation.
-        $csp_report_uri = ltrim($csp_report_uri, '/');
-        $base_path = base_path();
+
+    // Send HTTP response header if directives were prepared.
+    if ($csp_report_only) {
+      // Use report-only mode.
+      $this->response->headers->set('Content-Security-Policy-Report-Only', $directives);
+      if ($csp_vendor_prefix_x) {
+        $this->response->headers->set('X-Content-Security-Policy-Report-Only', $directives);
+      }
+      if ($csp_vendor_prefix_webkit) {
+        $this->response->headers->set('X-WebKit-CSP-Report-Only', $directives);
       }
-      $directives[] = "report-uri " . $base_path . $csp_report_uri;
-    }
-    if ($csp_upgrade_req) {
-      $directives[] = 'upgrade-insecure-requests';
     }
-    // Merge directives.
-    $directives = implode('; ', $directives);
-    // }
-    // send HTTP response header if directives were prepared.
-    if ($directives) {
-      if ($csp_report_only) {
-        // Use report-only mode.
-        $this->response->headers->set('Content-Security-Policy-Report-Only', $directives);
-        if ($csp_vendor_prefix_x) {
-          $this->response->headers->set('X-Content-Security-Policy-Report-Only', $directives);
-        }
-        if ($csp_vendor_prefix_webkit) {
-          $this->response->headers->set('X-WebKit-CSP-Report-Only', $directives);
-        }
+    else {
+      $this->response->headers->set('Content-Security-Policy', $directives);
+      if ($csp_vendor_prefix_x) {
+        $this->response->headers->set('X-Content-Security-Policy', $directives);
       }
-      else {
-        $this->response->headers->set('Content-Security-Policy', $directives);
-        if ($csp_vendor_prefix_x) {
-          $this->response->headers->set('X-Content-Security-Policy', $directives);
-        }
-        if ($csp_vendor_prefix_webkit) {
-          $this->response->headers->set('X-WebKit-CSP', $directives);
-        }
+      if ($csp_vendor_prefix_webkit) {
+        $this->response->headers->set('X-WebKit-CSP', $directives);
       }
     }
   }
@@ -515,4 +514,42 @@ EOT;
     $this->response->headers->set('Feature-Policy', $header);
   }
 
+  /**
+   * Returns the Seckit configuration.
+   *
+   * This method retrieves the seckit configuration, allowing modules
+   * to alter the configuration using the hook_seckit_options_alter hook.
+   * If no implementations of the hook are found, the original configuration
+   * is returned.
+   *
+   * @return \Drupal\Core\Config\ImmutableConfig
+   *   The Seckit configuration.
+   */
+  public function getSeckitConfig(): ImmutableConfig {
+    // Exit early and return the original configuration if no hooks
+    // need to be run.
+    if (!$this->moduleHandler->hasImplementations('seckit_options_alter')) {
+      return $this->config;
+    }
+
+    // Cache the results as this function will run more than once during the
+    // request cycle.
+    $config = &drupal_static(__FUNCTION__);
+
+    if (!isset($config)) {
+      /** @var \Drupal\Core\Config\ImmutableConfig $config */
+      $config = $this->config;
+      $raw_data = $config->getRawData();
+
+      // Allow other modules to alter the configuration.
+      $this->moduleHandler->alter('seckit_options', $raw_data);
+
+      // Merge the altered configuration with the original one.
+      $options = NestedArray::mergeDeep($raw_data, $config);
+      $config->setModuleOverride($options);
+    }
+
+    return $config;
+  }
+
 }
diff --git a/tests/seckit_test/seckit_test.info.yml b/tests/seckit_test/seckit_test.info.yml
new file mode 100644
index 0000000000000000000000000000000000000000..f5bef51c310311760d5b2f21792331596e7104c9
--- /dev/null
+++ b/tests/seckit_test/seckit_test.info.yml
@@ -0,0 +1,6 @@
+name: 'Seckit test module'
+type: module
+description: 'Test module for seckit.'
+package: Testing
+hidden: true
+version: VERSION
diff --git a/tests/seckit_test/seckit_test.module b/tests/seckit_test/seckit_test.module
new file mode 100644
index 0000000000000000000000000000000000000000..8660474ea2a7dbb0de9223c0051c6e4b2f0651f5
--- /dev/null
+++ b/tests/seckit_test/seckit_test.module
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * @file
+ * Module file for seckit tests.
+ */
+
+/**
+ * Implements hook_seckit_options_alter().
+ */
+function seckit_test_seckit_options_alter(array &$options) {
+  $options['seckit_xss']['csp']['script-src'] .= " example.com";
+  $options['seckit_various']['from_origin'] = TRUE;
+}
diff --git a/tests/src/Functional/SecKitTestCaseTest.php b/tests/src/Functional/SecKitTestCaseTest.php
index cb6f17184f4f595aa318c5adf1d574a8179d1878..e92d6981a9230c93cb7567e332176dd0855dfca2 100644
--- a/tests/src/Functional/SecKitTestCaseTest.php
+++ b/tests/src/Functional/SecKitTestCaseTest.php
@@ -681,6 +681,23 @@ EOT;
     $this->assertSession()->responseHeaderEquals('Feature-Policy', $expected);
   }
 
+  /**
+   * Tests the seckit_options_alter() hook.
+   */
+  public function testSeckitOptionsAlter() {
+    \Drupal::service('module_installer')->install(['seckit_test']);
+    $form = [
+      'seckit_xss[csp][checkbox]' => TRUE,
+      'seckit_xss[csp][script-src]' => "'self'",
+      'seckit_various[from_origin]' => FALSE,
+    ];
+    $this->drupalGet('admin/config/system/seckit');
+    $this->submitForm($form, t('Save configuration'));
+    $expected = "script-src 'self' example.com; report-uri " . base_path() . $this->reportPath;
+    $this->assertSession()->responseHeaderEquals('Content-Security-Policy', $expected);
+    $this->assertSession()->responseHeaderEquals('From-Origin', 'same');
+  }
+
   /**
    * Adds an origin to requests if $this->originHeader is set.
    *
