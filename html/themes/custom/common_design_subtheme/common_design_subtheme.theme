<?php

/**
 * @file
 * Template overrides, preprocess, and hooks for the GHI subtheme.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Access\AccessResultForbidden;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * We need more granularity when Views displays are getting rendered, because
 * they might be inside a Paragraph type (by way of viewsreference module) and
 * thus need special treatment which can happen in Twig.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme_suggestions_HOOK_alter/8.4.x
 */
function common_design_subtheme_theme_suggestions_views_view_alter(&$suggestions, $variables) {
  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
  $suggestions[] = sprintf('views_view__%s__%s', $variables['view']->id(), $variables['view']->current_display);
}

/**
 * Implements hook_preprocess_html().
 */
function common_design_subtheme_preprocess_html(&$vars) {
  // SVG sprite
  // Get the contents of the SVG sprite.
  $icons = file_get_contents(drupal_get_path('theme', 'common_design_subtheme') . '/img/icons/ghi-icons-sprite.svg');

  // Add a new render array to page_bottom so the icons
  // get added to the page.
  $vars['page_bottom']['hpc_icons'] = [
    '#type' => 'inline_template',
    '#template' => '<span class="hidden">' . $icons . '</span>',
  ];
}

/**
 * Implements hook_preprocess_page().
 *
 * Reinstate the title and local task blocks on layout builder pages.
 *
 * Background: The common design theme hides the page title and local task
 * blocks under certain circumstances. Unfortunately this also affects the
 * layout builder page, which is missing both the page title and the local task
 * bar.
 *
 * @see common_design_preprocess_page()
 */
function common_design_subtheme_preprocess_page(&$variables) {
  // If the node variable is defined then we assume we are on a node page.
  if (isset($variables['node']) && is_a($variables['node'], '\Drupal\node\NodeInterface')) {
    // Check if we are on a layout builder page.
    $route = \Drupal::routeMatch()->getRouteName();
    if ($route == 'layout_builder.overrides.node.view') {
      // If so, reinstate the blocks.
      common_design_subtheme_show_hidden_blocks_from_page($variables, [
        'page_title_block',
        'local_tasks_block',
      ]);
    }
  }
}

/**
 * Show previously hidden blocks on the page.
 *
 * @param array $variables
 *   Page variables as passed to hook_preprocess_page().
 * @param array $block_ids
 *   Ids of the blocks to show.
 *
 * @see common_design_hide_rendered_blocks_from_page()
 */
function common_design_subtheme_show_hidden_blocks_from_page(array &$variables, array $block_ids) {
  $blocks = common_design_load_theme_blocks($block_ids);
  if (!empty($blocks)) {
    foreach ($blocks as $block) {
      $id = $block->id();
      $region = $block->getRegion();

      $build = &$variables['page'][$region][$id] ?? NULL;
      if (!$build) {
        continue;
      }
      if (!array_key_exists('#original_access', $build) || !array_key_exists('#access', $build)) {
        continue;
      }
      $access = $build['#access'] ?? NULL;
      if (!$access instanceof AccessResultForbidden || $access->getReason() != 'common_design_hide_rendered_blocks_from_page') {
        continue;
      }
      if (!array_key_exists('#lazy_builder', $build)) {
        // This is just the usual block, so simply update the access property
        // with it's original value.
        $build['#access'] = $build['#original_access'];
        unset($build['#original_access']);
      }
      else {
        // Lazy builder blocks require more attention.
        $lazy_builder = $build['#lazy_builder'];
        // We first need to render the block.
        $rendered_block = call_user_func_array($lazy_builder[0], $lazy_builder[1]);
        // Then update the access information.
        $rendered_block['#access'] = $build['#original_access'];
        // And then replace the original lazy builder block render array with
        // the one we just built.
        $build = $rendered_block;
      }
    }
  }
}

/**
 * Assure common styling for tables.
 *
 * Do this by leveraging as much of the common design as possible.
 */
function common_design_subtheme_preprocess_table(&$vars) {
  $attributes = [
    'class' => [
      'ghi-table',
      'cd-table',
      'cd-table--responsive',
      'cd-table--striped',
    ],
  ];
  $attached = [
    'library' => [
      'common_design/cd-table',
    ],
  ];
  $vars['attributes'] = array_key_exists('attributes', $vars) ? NestedArray::mergeDeep($vars['attributes'], $attributes) : $attributes;
  $vars['#attached'] = array_key_exists('#attached', $vars) ? NestedArray::mergeDeep($vars['#attached'], $attached) : $attached;

  foreach ($vars['rows'] as &$row) {
    foreach ($row as &$columns) {
      foreach ($columns as $column_name => &$column) {
        /** @var \Drupal\Core\Template\Attribute $attribute */
        $attribute = is_array($column) && array_key_exists('attributes', $column) ? $column['attributes'] : NULL;
        if ($attribute) {
          $attribute->setAttribute('data-column', $column_name);
          if ($attribute->hasAttribute('data-column-type')) {
            $attributes = $attribute->toArray();
            $attribute->addClass('cd-table--' . $attributes['data-column-type']);
          }
        }
      }
    }
  }
}

/**
 * Preprocess an hpc progress bar to attach our library.
 */
function common_design_subtheme_preprocess_hpc_progress_bar(array &$variables) {
  $variables['#attached']['library'][] = 'common_design_subtheme/ghi-progress-bar';
}

/**
 * Preprocess an hpc pic chart to attach our library.
 */
function common_design_subtheme_preprocess_hpc_pie_chart(array &$variables) {
  $variables['#attached']['library'][] = 'common_design_subtheme/ghi-pie-chart';
}

/**
 * Preprocess a plan headline figures list.
 */
function common_design_subtheme_preprocess_item_list__plan_headline_figures(&$variables) {
  $items = &$variables['items'];
  $figures = [];
  foreach ($items as &$item) {
    $figures[] = [
      'label' => $item['value']['#title'],
      'value' => $item['value'][0],
    ];
  }
  $variables['figures'] = $figures;
}

/**
 * Preprocess a plan headline figures list.
 */
function common_design_subtheme_preprocess_item_list__plan_entity_types(&$variables) {
  // Limit to 3 items in a row.
  $count = count($variables['items']);
  $variables['cols'] = $count == 4 ? 2 : 3;
}
