<?php

/**
 * @file
 * Install, uninstall and update hooks for HPC API module.
 */

use Drupal\Core\File\FileSystem;
use Drupal\Core\File\FileSystemInterface;
use Drupal\hpc_api\ApiObjects\Location;
use Psr\Http\Message\ResponseInterface;
use Drupal\hpc_api\Helpers\QueryHelper;
use Drupal\hpc_api\Query\EndpointQuery;

/**
 * Implements hook_install().
 */
function hpc_api_install($is_syncing) {
  $file_system = \Drupal::service('file_system');

  // Create import directory.
  $path = QueryHelper::IMPORT_DIR;
  if (!$file_system->prepareDirectory($path, Filesystem::CREATE_DIRECTORY | FileSystem::MODIFY_PERMISSIONS)) {
    \Drupal::service('messenger')->addMessage(t('Unable to create the import file directory. Check the permissions on your files directory.'), 'error');
  }

  $path = Location::GEO_JSON_DIR;
  if (!$file_system->prepareDirectory($path, Filesystem::CREATE_DIRECTORY | FileSystem::MODIFY_PERMISSIONS)) {
    \Drupal::service('messenger')->addMessage(t('Unable to create the geojson file directory. Check the permissions on your files directory.'), 'error');
  }
}

/**
 * Implements hook_uninstall().
 */
function hpc_api_uninstall($is_syncing) {
  // Delete import directory.
  \Drupal::service('file_system')->rmdir(QueryHelper::IMPORT_DIR);
}

/**
 * Implements hook_requirements().
 */
function hpc_api_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {

    // API server availability.
    $query_handler = QueryHelper::getEndpointQueryHandler('fts/flow/custom-search', [
      'locationid' => 1,
      'year' => date('Y'),
      'limit' => 1,
    ]);
    $api_test_url = $query_handler->getFullEndpointUrl();
    $requirements['hpc_api_server'] = [
      'title' => t('HPC API: Server'),
      'value' => $api_test_url,
      'description' => t('API endpoints can be queried and return status code 200'),
    ];

    $response = $query_handler->sendQuery();
    if ($response !== NULL) {
      $requirements['hpc_api_server']['severity'] = $response->getStatusCode() == 200 ? REQUIREMENT_OK : REQUIREMENT_ERROR;
      $requirements['hpc_api_server']['description'] = t('Server responds with HTTP status code %status_code %status_message.', [
        '%status_code' => $response->getStatusCode(),
        '%status_message' => $response->getReasonPhrase(),
      ]);
    }
    else {
      $requirements['hpc_api_server']['severity'] = REQUIREMENT_ERROR;
      $requirements['hpc_api_server']['description'] = t('Server request failed with an unknown error. Please check the connection and contact the HPC service maintainer.');
    }

    $api_key = \Drupal::config('hpc_api.settings')->get('api_key');
    $requirements['hpc_api_key'] = [
      'title' => t('HPC API: API key'),
      'severity' => !empty($api_key) ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      'value' => !empty($api_key) ? t('API key is set and works correctly') : t('API key not set'),
    ];
    if (!empty($api_key) && !hpc_api_test_api_key()) {
      $requirements['hpc_api_key']['severity'] = REQUIREMENT_ERROR;
      $requirements['hpc_api_key']['value'] = t('API key set, but backend requests fail. Please review and correct the API key.');
    }

    // Setup the imports directory.
    $requirements['hpc_api_import']['title'] = t('HPC API: Import directory');
    $requirements['hpc_api_import']['value'] = t('The directory for local storage of HPC data for imports exists and is writable.');
    $requirements['hpc_api_import']['severity'] = REQUIREMENT_OK;
    hpc_api_directory_requirements(QueryHelper::IMPORT_DIR, $requirements['hpc_api_import']);

    // Setup the imports directory.
    $requirements['hpc_api_geojson']['title'] = t('HPC API: GEO JSON directory');
    $requirements['hpc_api_geojson']['value'] = t('The directory for local storage of GEO JSON data exists and is writable.');
    $requirements['hpc_api_geojson']['severity'] = REQUIREMENT_OK;
    hpc_api_directory_requirements(Location::GEO_JSON_DIR, $requirements['hpc_api_geojson']);
  }
  return $requirements;
}

/**
 * Set the status requirements for a directory check point.
 */
function hpc_api_directory_requirements($destination, &$requirements) {
  \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
  $is_writable = is_writable($destination);
  $is_directory = is_dir($destination);
  if (!$is_writable || !$is_directory) {
    if (!$is_directory) {
      $error = t('The directory %directory does not exist.', ['%directory' => $destination]);
    }
    else {
      $error = t('The directory %directory is not writable.', ['%directory' => $destination]);
    }
    $description = t('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
    if (!empty($error)) {
      $description = $error . ' ' . $description;
      $requirements['value'] = $description;
      $requirements['severity'] = REQUIREMENT_ERROR;
    }
  }
}

/**
 * Test if the API key is working.
 */
function hpc_api_test_api_key() {
  // Just call an arbitrary endpoint that returns an empty data set, but
  // responds with HTTP 200.
  $query_handler = QueryHelper::getEndpointQueryHandler('participant/1', [], 'v2');
  $query_handler->setAuthMethod(EndpointQuery::AUTH_METHOD_API_KEY);
  $result = $query_handler->sendQuery();
  return $result instanceof ResponseInterface && $result->getStatusCode() == 200;
}
