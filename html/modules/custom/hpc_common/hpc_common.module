<?php

/**
 * @file
 * Contains hpc_common.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\hpc_common\Helpers\UserHelper;
use Drupal\hpc_common\Plugin\HPCBlockBase;

/**
 * Implements hook_help().
 */
function hpc_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hpc_common module.
    case 'help.page.hpc_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Common base definitions for HPC features in Drupal 8') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function hpc_common_theme($existing, $type, $theme, $path) {
  $common = [
    'file' => 'hpc_common.theme.inc',
    'template' => 'hpc-markup-wrapper',
  ];

  return [
    'hpc_currency' => [
      'variables' => [
        'value'  => NULL,
        'scale' => '',
        'currency' => 'USD',
        'markup_element' => NULL,
        'export' => FALSE,
        'use_abbreviation' => TRUE,
        'decimals' => NULL,
        'decimal_format' => NULL,
      ],
    ] + $common,
    'hpc_amount' => [
      'variables' => [
        'amount' => NULL,
        'scale' => '',
        'suffix' => '',
        'include_suffix' => TRUE,
        'markup_element' => NULL,
        'export' => FALSE,
        'use_abbreviation' => TRUE,
        'decimals' => 0,
        'decimal_format' => NULL,
      ],
    ] + $common,
    'hpc_percent' => [
      'variables' => [
        'percent' => NULL,
        'ratio' => NULL,
        'markup_element' => NULL,
        'export' => FALSE,
        'precision' => NULL,
        'decimal_format' => NULL,
      ],
    ] + $common,
    'hpc_progress_bar' => [
      'variables' => [
        'percent' => NULL,
        'ratio' => NULL,
        'base_ratio' => NULL,
        'export' => FALSE,
        'hide_value' => FALSE,
        'tooltip' => NULL,
      ],
      'template' => 'hpc-progress-bar',
    ] + $common,
    'hpc_pie_chart' => [
      'variables' => [
        'ratio' => NULL,
        'label' => NULL,
        'export' => FALSE,
        'hide_value' => FALSE,
        'decimal_format' => NULL,
      ],
      'template' => 'hpc-pie-chart',
    ] + $common,
    'hpc_sparkline' => [
      'variables' => [
        'data' => NULL,
        'baseline_value' => NULL,
        'labels' => NULL,
        'baseline_label' => NULL,
        'tooltips' => NULL,
      ],
      'template' => 'hpc-sparkline',
    ] + $common,
    'hpc_sparkline_tooltip' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
      ],
      'template' => 'hpc-sparkline-tooltip',
    ] + $common,
    'hpc_autoformat_value' => [
      'variables' => [
        'value' => NULL,
        'unit_type' => NULL,
        'unit_defaults' => NULL,
        'markup_element' => NULL,
        'decimal_format' => NULL,
        'export' => FALSE,
      ],
    ] + $common,
    'hpc_modal_link' => [
      'variables' => [
        'link' => NULL,
        'tooltip' => NULL,
      ],
      'template' => 'hpc-modal-link',
    ] + $common,
    'hpc_tooltip_wrapper' => [
      'variables' => [
        'tooltips' => NULL,
      ],
    ],
    'hpc_tooltip' => [
      'variables' => [
        'tooltip' => NULL,
        'class' => NULL,
        'tag' => NULL,
        'tag_content' => NULL,
        'tooltip_theme' => NULL,
      ],
      'template' => 'hpc-tooltip',
    ] + $common,
    'hpc_popover' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
        'class' => NULL,
        'trigger' => NULL,
        // Either a custom tag with optional HTML content.
        'tag' => NULL,
        'tag_content' => NULL,
        // Or a material icon.
        'material_icon' => NULL,
        'disabled' => NULL,
      ],
      'template' => 'hpc-popover',
    ] + $common,
    'hpc_hid_session_information' => [
      'variables' => [
        'description' => NULL,
        'user_id' => NULL,
        'id_message' => NULL,
        'token' => NULL,
        'token_message' => NULL,
      ],
      'template' => 'hpc-hid-session-information',
    ],
    'hpc_icon' => [
      'variables' => [
        'icon' => NULL,
        'tag' => NULL,
      ],
      'template' => 'hpc-icon',
    ] + $common,
    'hpc_toggle' => [
      'variables' => [
        'parent_selector' => NULL,
        'target_selector' => NULL,
      ],
    ] + $common,
  ];
}

/**
 * Implements hook_panels_build_alter().
 *
 * This is used to replace page url arguments (as defined in the path of a
 * page manager page using panels) that are used as placeholders in page titles
 * with their actual values from the url.
 */
function hpc_common_panels_build_alter(array &$build, $panels_display_variant) {
  $title = (string) $build['#title'];
  if (strpos($title, '{') === FALSE) {
    return;
  }
  $valid_types = ['string', 'integer'];
  foreach ($panels_display_variant->getContexts() as $context_key => $context) {
    if (in_array($context->getContextDefinition()->getDataType(), $valid_types)) {
      $title = str_replace('{' . $context_key . '}', Html::escape($context->getContextValue()), $title);
    }
  }
  $build['#title'] = $title;
}

/**
 * Implements hook_preprocess_block().
 *
 * This adds API tooltips to blocks based on HPCBlockBase.
 */
function hpc_common_preprocess_block(&$vars) {

  if (empty($vars['configuration'])) {
    return;
  }
  if (empty($vars['plugin_id']) || empty($vars['configuration']['uuid'])) {
    return;
  }

  $vars['attributes']['class'][] = 'block-' . $vars['configuration']['uuid'];

  // Add API tooltips to blocks for administrators.
  if (UserHelper::isAdministrator() && array_key_exists('#block_instance', $vars['elements']['content'])) {
    $block_instance = $vars['elements']['content']['#block_instance'];
    if (!$block_instance || !$block_instance instanceof HPCBlockBase) {
      return;
    }
    $endpoint_urls = $block_instance->getFullEndpointUrls();
    $icons = $vars['icons'] ?? [];
    if ((!$icons || empty($icons['api_url'])) && !empty($endpoint_urls)) {
      $vars['icons']['api_url'] = [
        '#theme' => 'hpc_tooltip',
        '#tooltip' => implode('<br />', $endpoint_urls),
        '#class' => 'api-url',
      ];
      $vars['attributes']['class'][] = 'has-api-url-tooltip';
      $vars['icons'] = $icons;
    }
  }
}

/**
 * Static storage helper function.
 */
function hpc_common_static_store($key, $result = NULL) {
  $static_storage = &drupal_static(__FUNCTION__, []);
  if ($result !== NULL) {
    $static_storage[$key] = $result;
  }
  else {
    return array_key_exists($key, $static_storage) ? $static_storage[$key] : NULL;
  }
}
