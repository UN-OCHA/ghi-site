<?php

/**
 * @file
 * Contains ghi_paragraph_handler.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function ghi_paragraph_handler_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ghi_paragraph_handler module.
    case 'help.page.ghi_paragraph_handler':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows paragraphs to controlled by classes.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ghi_paragraph_handler_preprocess_paragraph(&$variables) {
  if (empty($variables['paragraph']) || $variables['view_mode'] == 'preview') {
    return;
  }

  $paragraph = $variables['paragraph'];

  if (!$plugin = ghi_paragraph_handler_get_handler($paragraph)) {
    return;
  }

  $plugin->dispatchPreprocess($paragraph, $variables);
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function ghi_paragraph_handler_paragraph_view_alter(array &$build, Paragraph $paragraph, EntityViewDisplayInterface $display) {
  // Delegate paragraph display to a plugin class.
  if ($display->getMode() == 'preview' || !$plugin = ghi_paragraph_handler_get_handler($paragraph)) {
    return;
  }

  $plugin->dispatchBuild($paragraph, $build);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ghi_paragraph_handler_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if (empty($element['#paragraph_type'])) {
    return;
  }

  if (!empty($context['items']) && !$context['items']->isEmpty()) {
    $paragraph = Paragraph::load($context['items']->get($context['delta'])->target_id);
  }

  if (!$paragraph || !$plugin = ghi_paragraph_handler_get_handler($paragraph)) {
    return;
  }

  // Detect real edit mode.
  if (isset($element['subform']['#process'])) {
    $plugin->dispatchWidgetAlter($paragraph, $element, $form_state, $context);
  }
  else {
    // @todo: add Preview/Summary handler.
  }
}

/**
 * Get the correct ParagraphHandler plugin for a given paragraph.
 *
 * @param Drupal\paragraphs\Entity\Paragraph $paragraph
 *   A paragraph entity.
 *
 * @return mixed
 *   Null or a ParagraphHandler plugin.
 */
function ghi_paragraph_handler_get_handler(Paragraph $paragraph) {
  $plugin_manager = \Drupal::service('plugin.manager.ghi_paragraph_handler');
  $definitions = $plugin_manager->getDefinitions();

  foreach ($definitions as $plugin_id => $definition) {
    if ($plugin_id == $paragraph->bundle()) {
      return $plugin_manager->createInstance($plugin_id);
    }
  }
}
