<?php

/**
 * @file
 * Contains hook implementations for the GHI Sections module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\ghi_base_objects\Entity\BaseObjectInterface;
use Drupal\ghi_sections\Entity\Section;
use Drupal\ghi_sections\Entity\SectionNodeInterface;
use Drupal\ghi_sections\Entity\Tag;
use Drupal\layout_builder\SectionStorageInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ghi_sections_entity_bundle_info_alter(array &$bundles) {
  $bundles['node'][Section::BUNDLE]['class'] = Section::class;
  $bundles['node'][Section::BUNDLE]['label'] = t('Section');
  $bundles['taxonomy_term'][Tag::BUNDLE]['class'] = Tag::class;
  $bundles['taxonomy_term'][Tag::BUNDLE]['label'] = t('Tags');
}

/**
 * Implements hook_preprocess_page_title().
 */
function ghi_sections_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $is_admin_route = \Drupal::service('router.admin_context')->isAdminRoute();
  /** @var \Drupal\ghi_sections\SectionManager $section_manager */
  $section_manager = \Drupal::service('ghi_sections.manager');
  if ($is_admin_route || !$node instanceof NodeInterface) {
    return;
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    if ($section = $section_manager->getCurrentSection($node)) {
      $variables['title'] = $section->getPageTitle();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ghi_sections_form_node_section_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->buildEntity($form, $form_state);
  if (!$entity instanceof SectionNodeInterface) {
    return;
  }

  /** @var \Drupal\ghi_base_objects\Entity\BaseObjectInterface $object */
  $object = $entity->getBaseObject();

  // Hide the year field if the object doesn't need it.
  if ($object instanceof BaseObjectInterface && !$object->needsYear()) {
    $form['field_year']['#access'] = FALSE;
  }
  // Also disable the year field. Beeing able to change it would at least need
  // another validation for duplication of base object - year combinations, as
  // we do them during section creation.
  $form['field_year']['#disabled'] = TRUE;

  // Always disable the base object field. It's currently not allowed to
  // change it.
  if ($object instanceof BaseObjectInterface) {
    $field_name = SectionNodeInterface::BASE_OBJECT_FIELD_NAME;
    $form[$field_name]['#disabled'] = TRUE;
    $form[$field_name]['widget'][0]['target_id']['#title'] .= ': ' . $object->type->entity->label();
    $form[$field_name]['widget'][0]['target_id']['#description'] = t('The base object cannot be changed after the initial creation of a @entity_type_label. <a href="@base_object_edit_url" target="_blank">Edit @label</a>', [
      '@entity_type_label' => strtolower($entity->type->entity->label()),
      '@base_object_edit_url' => $object->toUrl('edit-form', [
        'query' => [
          'destination' => $entity->toUrl('edit-form')->toString(),
        ],
      ])->toString(),
      '@label' => $object->label(),
    ]);
  }
}

/**
 * Implements hook_layout_builder_view_context_alter().
 */
function ghi_sections_layout_builder_view_context_alter(array &$contexts, ?SectionStorageInterface $section_storage = NULL, $sample = FALSE) {
  /** @var \Drupal\ghi_sections\SectionContextManager $section_context_manager */
  $section_context_manager = \Drupal::service('ghi_sections.context_manager');

  $context = NULL;
  if (isset($contexts['layout_builder.entity']) && $contexts['layout_builder.entity']->hasContextValue()) {
    $context = $section_context_manager->getYearContextFromEntity($contexts['layout_builder.entity']->getContextValue());
  }
  elseif (isset($contexts['entity']) && $contexts['entity']->hasContextValue()) {
    $context = $section_context_manager->getYearContextFromEntity($contexts['entity']->getContextValue());
  }
  elseif (isset($contexts['node']) && $contexts['node']->hasContextValue()) {
    $context = $section_context_manager->getYearContextFromEntity($contexts['node']->getContextValue());
  }
  else {
    $context = $section_context_manager->getYearContext();
  }

  if ($context) {
    $contexts['year'] = $context;
  }
}

/**
 * Implements hook_preprocess_block__sections_by_term().
 *
 * Use dynamic label.
 */
function ghi_sections_preprocess_block__sections_by_term(&$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  /** @var \Drupal\ghi_sections\Plugin\Block\SectionsByTerm $block */
  $block = $block_manager->createInstance($variables['plugin_id'], $variables['configuration']);
  $variables['label'] = !empty($variables['configuration']['label_display']) ? $block->label() : '';
  $variables['title_attributes']['id'] = $block->getAriaId();
}

/**
 * Implements hook_gin_ignore_sticky_form_actions_alter().
 */
function ghi_sections_gin_ignore_sticky_form_actions_alter(&$form_ids) {
  $form_ids[] = 'ghi_sections_wizard';
}
