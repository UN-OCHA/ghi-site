<?php

/**
 * @file
 * Contains hook implementations for the GHI teams module.
 */

use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\hpc_common\Helpers\TaxonomyHelper;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_node_access_records().
 */
function ghi_teams_node_access_records(NodeInterface $node) {
  $excluded_bundles = ['document'];
  if (!$node->hasField('field_team') || in_array($node->bundle(), $excluded_bundles)) {
    return [];
  }

  $grants = [];
  $grants[] = [
    'realm' => 'ghi_teams_node_access',
    'gid' => 0,
    'grant_view' => $node->isPublished(),
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  ];

  // Get the team id from the current node if it's available.
  $team_id = !$node->field_team->isEmpty() ? $node->field_team->entity->tid->value : NULL;
  if (!$team_id) {
    // Otherwise try to get the team from the referenced entity.
    $parent_entity = NULL;
    if ($node->hasField('field_entity_reference') && $node->field_entity_reference->entity?->hasField('field_team')) {
      $parent_entity = $node->field_entity_reference->entity;
    }

    if (!$team_id && $parent_entity && !$parent_entity->field_team->isEmpty()) {
      $team_id = $parent_entity->field_team->entity->tid->value;
    }
  }

  if (!$team_id) {
    return $grants;
  }
  $grants[] = [
    'realm' => 'ghi_teams_node_access',
    'gid' => $team_id,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 0,
    'priority' => 0,
  ];

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function ghi_teams_node_grants(AccountInterface $account, $op) {
  $grants = [];
  $grants['ghi_teams_node_access'] = [0];

  $user = User::load($account->id());
  if (!$user->hasField('field_team')) {
    return $grants;
  }

  $teams = TaxonomyHelper::loadMultipleTermsByVocabulary('team');
  if ($user->hasPermission('administer teams') && !empty($teams)) {
    $grants['ghi_teams_node_access'] = array_merge($grants['ghi_teams_node_access'], array_values(array_map(function ($term) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      return $term->id();
    }, $teams)));
  }
  elseif (!$user->field_team->isEmpty()) {
    $grants['ghi_teams_node_access'][] = $user->field_team->entity->tid->value;
  }
  return $grants;
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Restrict access to field_team to users with proper permission.
 */
function ghi_teams_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser();
  $form['field_team']['#access'] = $user->hasPermission('administer teams');
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Restrict access to field_team to users with proper permission.
 */
function ghi_teams_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = method_exists($form_state, 'getEntity') ? $form_state->getEntity() : NULL;
  if (!$form_object || !$form_object instanceof EntityPublishedInterface) {
    return;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function ghi_teams_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view->storage->id() != 'teams') {
    return;
  }
  $variables['#attached']['library'][] = 'ghi_teams/gin';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Deny access to publishing nodes if the current user has no permission to do
 * so. This should have been done already by the publishcontent module, but
 * apparently it doesn't work.
 */
function ghi_teams_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('publishcontent.settings');
  if (empty($form['status'])) {
    return;
  }
  $user = \Drupal::currentUser();
  $node = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\publishcontent\Access\PublishContentAccess $publish_content_access */
  $publish_content_access = \Drupal::service('publishcontent.access');
  if ($node && !$publish_content_access->access($user, $node)->isAllowed()) {
    $form['status']['#disabled'] = TRUE;
    $form['status']['widget']['value']['#attributes']['title'] = t('You can not change the @published status.', [
      '@published' => $config->get('publish_text_value'),
    ]);
  }
}
