<?php

/**
 * @file
 * Contains hook implementations for the GHI plan clusters module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\ghi_base_objects\Entity\BaseObject;
use Drupal\ghi_base_objects\Entity\BaseObjectInterface;
use Drupal\ghi_plan_clusters\Entity\PlanCluster;
use Drupal\ghi_plan_clusters\Entity\PlanClusterInterface;
use Drupal\ghi_plan_clusters\PlanClusterManager;
use Drupal\ghi_plans\Entity\GoverningEntity;
use Drupal\ghi_plans\Entity\Plan;
use Drupal\ghi_sections\Entity\SectionNodeInterface;
use Drupal\ghi_sections\SectionManager;
use Drupal\ghi_subpages\Entity\LogframeSubpage;
use Drupal\ghi_subpages\Helpers\SubpageHelper;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ghi_plan_clusters_entity_bundle_info_alter(array &$bundles) {
  $bundles['node'][PlanClusterInterface::BUNDLE]['class'] = PlanCluster::class;
  $bundles['node'][PlanClusterInterface::BUNDLE]['label'] = t('Plan cluster');
}

/**
 * Get the plan cluster manager class.
 *
 * @return \Drupal\ghi_plan_clusters\PlanClusterManager
 *   The plan cluster manager service.
 */
function ghi_plan_clusters_get_manager_service() {
  $plan_cluster_manager = \Drupal::service('ghi_plan_clusters.manager');
  return $plan_cluster_manager;
}

/**
 * Implements hook_current_section_alter().
 */
function ghi_plan_clusters_current_section_alter(&$section, $node) {
  if ($node instanceof PlanClusterInterface) {
    $section = $node->getParentNode();
  }
  if ($node instanceof LogframeSubpage && $node->getParentNode() instanceof PlanClusterInterface) {
    $section = $node->getParentBaseNode();
  }
}

/**
 * Implements hook_section_post_save().
 *
 * Go over all created subpages for a node and save it again, to fix an issue
 * with the generation of url alias for subpages, if the pattern uses the
 * section url alias as one of their tokens.
 */
function ghi_plan_clusters_section_post_save(SectionNodeInterface $section_node) {
  if (!$section_node->isLatestRevision()) {
    return;
  }

  // Load all subpages and save them again to make sure they have proper paths.
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();

  // Make sure all subpages exist.
  $plan_cluster_manager->assureSubpagesForBaseNode($section_node);

  // Load all subpages and save them again to make sure they have proper paths.
  $subpages = $plan_cluster_manager->loadNodesForSection($section_node) ?? [];
  foreach ($subpages as $subpage) {
    $subpage->setNewRevision(FALSE);
    $subpage->setSyncing(TRUE);
    $subpage->save();
  }

  if (!$section_node->isPublished()) {
    foreach ($subpages as $subpage) {
      if (!$subpage->isPublished()) {
        continue;
      }
      $subpage->setUnpublished();
      $subpage->save();

      \Drupal::messenger()->addStatus(t('Cluster subpage @subpage has been unpublished (@id, @revision_id).', [
        '@subpage' => $subpage->label(),
        '@id' => $subpage->id(),
        '@revision_id' => $subpage->getRevisionId(),
      ]));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ghi_plan_clusters_base_object_insert(BaseObject $base_object) {
  if ($base_object->bundle() != PlanClusterManager::BASE_OBJECT_BUNDLE_GOVERNING_ENTITY) {
    // We act only on cluster base objects.
    return;
  }
  /** @var \Drupal\ghi_base_objects\ApiObjects\BaseObjectInterface $plan_object */
  $plan_object = $base_object->get('field_plan')->entity;
  if (!$plan_object || !$plan_object instanceof Plan) {
    // Bail if there is no plan base object associated to the cluster object.
    return;
  }
  // Load all sections which reference the plan object.
  $sections = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => SectionManager::SECTION_BUNDLES,
    'field_base_object' => $plan_object->id(),
  ]);
  if (!empty($sections)) {
    foreach ($sections as $section) {
      // Trigger a save, so that ghi_plan_clusters_section_post_save() gets
      // called.
      $section->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ghi_plan_clusters_base_object_update(BaseObjectInterface $base_object) {
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  $entity = $plan_cluster_manager->loadClusterSubpageForBaseObject($base_object);
  if (!$entity) {
    return;
  }
  $entity->setTitle($base_object->label());
  $entity->setNewRevision(FALSE);
  $entity->setSyncing(TRUE);
  $entity->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ghi_plan_clusters_form_node_logframe_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\ghi_subpages\Entity\LogframeSubpage $entity */
  $entity = $form_object->getEntity();
  if ($entity->getParentNode() instanceof PlanCluster) {
    $form['status']['#disabled'] = TRUE;
    $form['status']['#attributes']['title'] = t('The published status is inherited from the parent cluster page.');
    $form['field_entity_reference']['widget'][0]['target_id']['#title'] = $entity->getParentNode()->type->entity->label();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ghi_plan_clusters_form_node_plan_cluster_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->buildEntity($form, $form_state);
  if (!$entity instanceof PlanClusterInterface) {
    return;
  }

  /** @var \Drupal\ghi_plan_clusters\PlanClusterManager $plan_cluster_manager */
  $plan_cluster_manager = \Drupal::service('ghi_plan_clusters.manager');
  $plan_cluster_manager->nodeEditFormAlter($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ghi_plan_clusters_node_presave(EntityInterface $node) {
  if ($node instanceof PlanClusterInterface && $node->hasField(PlanCluster::SECTION_REFERENCE_FIELD_NAME)) {
    // Just make sure that this node has a valid reference to a section node.
    $parent_node = $node->getParentNode();
    $stored_parent_node = $node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->entity;
    if ($parent_node && (!$stored_parent_node || $parent_node->id() != $stored_parent_node->id())) {
      $node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->setValue([
        'target_id' => $parent_node->id(),
      ]);
    }
    if ($node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->isEmpty()) {
      $node->setUnpublished();
    }
  }

  // Synchronise the published status for plan clusters and their logframe
  // pages.
  if ($node instanceof LogframeSubpage && $node->getParentNode() instanceof PlanCluster) {
    $node->status = $node->getParentNode()->isPublished();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function ghi_plan_clusters_node_update(EntityInterface $node) {
  // Synchronise the published status for plan clusters and their logframe
  // pages.
  if ($node instanceof PlanCluster && $logframe_node = $node->getLogframeNode()) {
    $logframe_node->status = $node->isPublished();
    $logframe_node->setNewRevision(FALSE);
    $logframe_node->isSyncing(TRUE);
    $logframe_node->save();
  }
}

/**
 * Implements hook_entity_delete().
 */
function ghi_plan_clusters_entity_delete(EntityInterface $entity) {
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  if ($entity instanceof NodeInterface && SubpageHelper::getSubpageManager()->isBaseTypeNode($entity)) {
    // Delete cluster subpages for this base node.
    $plan_cluster_manager->deleteSubpagesForBaseNode($entity);
  }
  if ($entity instanceof GoverningEntity) {
    // Delete the cluster page for this governing entity base object.
    $cluster_subpage = $plan_cluster_manager->loadClusterSubpageForBaseObject($entity);
    if ($cluster_subpage) {
      $cluster_subpage->delete();
    }
  }
}

/**
 * Implements hook_is_subpage_type().
 */
function ghi_plan_clusters_is_subpage_type($node_type) {
  return in_array($node_type, [PlanClusterInterface::BUNDLE]);
}

/**
 * Implements hook_subpage_admin_form_header_links().
 */
function ghi_plan_clusters_subpage_admin_form_header_links(NodeTypeInterface $node_type, SectionNodeInterface $section_node) {
  if ($node_type->id() != PlanClusterInterface::BUNDLE) {
    return;
  }
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  $plan_clusters = $plan_cluster_manager->loadNodesForSection($section_node);
  $cluster_logframes = $plan_cluster_manager->loadPlanClusterLogframeSubpageNodesForSection($section_node);
  if (empty($plan_clusters)) {
    return;
  }

  $config = \Drupal::config('layout_builder_modal.settings');
  $data_dialog_options = Json::encode([
    'width' => $config->get('modal_width'),
    'height' => $config->get('modal_height'),
    'target' => 'layout-builder-modal',
    'autoResize' => $config->get('modal_autoresize'),
    'modal' => TRUE,
  ]);
  $link_options = [
    'attributes' => [
      'class' => ['use-ajax'],
      'data-dialog-options' => $data_dialog_options,
      'data-dialog-type' => 'dialog',
    ],
  ];

  $links = [];
  if (count($cluster_logframes) != count($plan_clusters)) {
    $link_label = t('Create logframe subpages');
    if ($cluster_logframes && count($cluster_logframes) < count($plan_clusters)) {
      $link_label = t('Create missing logframe subpages');
    }
    $links['create_logframes'] = Link::createFromRoute($link_label, 'ghi_plan_clusters.logframes.create', [
      'node' => $section_node->id(),
    ], $link_options);
  }
  else {
    $link_label = t('Rebuild logframe subpages');
    $links['rebuild_logframes'] = Link::createFromRoute($link_label, 'ghi_plan_clusters.logframes.rebuild', [
      'node' => $section_node->id(),
    ], $link_options);
  }

  if (count($cluster_logframes)) {
    $link_label = t('Delete logframe subpages');
    $links['delete_logframes'] = Link::createFromRoute($link_label, 'ghi_plan_clusters.logframes.delete', [
      'node' => $section_node->id(),
    ], $link_options);
  }

  return $links;
}

/**
 * Implements hook_custom_subpages_alter().
 */
function ghi_plan_clusters_custom_subpages_alter(array &$subpages, NodeInterface $node, NodeTypeInterface $node_type) {
  if ($node_type->id() != PlanClusterInterface::BUNDLE) {
    return;
  }
  // The cluster subpages should already be there, as added by
  // SubpageManager::getCustomSubpagesForBaseNode(). We validate the list here
  // and make sure to filter out plan clusters that don't have a base object
  // associated.
  $subpages = array_filter($subpages, function (NodeInterface $subpage_node) {
    return !$subpage_node instanceof PlanClusterInterface || !empty($subpage_node->getBaseObject());
  });

  // Let's add in the logframe subpages if there are any.
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  $logframes = $plan_cluster_manager->loadPlanClusterLogframeSubpageNodesForSection($node);
  $subpages += $logframes;
}

/**
 * Implements hook_get_base_type_node_alter().
 */
function ghi_plan_clusters_get_base_type_node_alter(&$base_type_node, NodeInterface $node) {
  $plan_cluster = $node;
  if ($node instanceof LogframeSubpage && $node->getParentNode() instanceof PlanClusterInterface) {
    $plan_cluster = $node->getParentNode();
  }
  if (!$plan_cluster instanceof PlanClusterInterface) {
    return NULL;
  }
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  $section = $plan_cluster_manager->loadSectionForClusterNode($plan_cluster);
  if ($section) {
    $base_type_node = $section;
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function ghi_plan_clusters_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity instanceof LogframeSubpage && $entity->getParentNode() instanceof PlanCluster) {
    unset($operations['toggle_status']);
  }
}
