<?php

/**
 * @file
 * Contains hook implementations for the GHI plan clusters module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\ghi_base_objects\Entity\BaseObject;
use Drupal\ghi_plan_clusters\Entity\PlanCluster;
use Drupal\ghi_plan_clusters\PlanClusterManager;
use Drupal\ghi_plans\Entity\GoverningEntity;
use Drupal\ghi_plans\Entity\Plan;
use Drupal\ghi_sections\Entity\SectionNodeInterface;
use Drupal\ghi_sections\SectionManager;
use Drupal\ghi_subpages\Helpers\SubpageHelper;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ghi_plan_clusters_entity_bundle_info_alter(array &$bundles) {
  $bundles['node']['plan_cluster']['class'] = PlanCluster::class;
  $bundles['node']['plan_cluster']['label'] = t('Plan cluster');
}

/**
 * Get the plan cluster manager class.
 *
 * @return \Drupal\ghi_plan_clusters\PlanClusterManager
 *   The plan cluster manager service.
 */
function ghi_plan_clusters_get_manager_service() {
  $plan_cluster_manager = \Drupal::service('ghi_plan_clusters.manager');
  return $plan_cluster_manager;
}

/**
 * Implements hook_current_section_alter().
 */
function ghi_plan_clusters_current_section_alter(&$section, $node) {
  if (!$node instanceof PlanCluster) {
    return NULL;
  }
  $section = $node->getParentNode();
}

/**
 * Implements hook_section_post_save().
 *
 * Go over all created subpages for a node and save it again, to fix an issue
 * with the generation of url alias for subpages, if the pattern uses the
 * section's url alias as one of their tokens.
 */
function ghi_plan_clusters_section_post_save(NodeInterface $section_node) {
  if (!SubpageHelper::isBaseTypeNode($section_node)) {
    return;
  }

  // Load all subpages and save them again to make sure they have proper paths.
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();

  // Make sure all subpages exist.
  $plan_cluster_manager->assureSubpagesForBaseNode($section_node);

  // Load all subpages and save them again to make sure they have proper paths.
  $subpages = $plan_cluster_manager->loadNodesForSection($section_node) ?? [];
  foreach ($subpages as $subpage) {
    $subpage->setSyncing(TRUE);
    $subpage->save();
  }

  if (!$section_node->isPublished()) {
    // Load all subpages and make sure that those are unpublished too.
    $subpages = $plan_cluster_manager->loadNodesForSection($section_node);

    if (!empty($subpages)) {
      foreach ($subpages as $subpage) {
        if (!$subpage->isPublished()) {
          continue;
        }
        $subpage->setUnpublished();
        $subpage->save();

        \Drupal::messenger()->addStatus(t('Cluster subpage @subpage has been unpublished.', [
          '@subpage' => $subpage->label(),
        ]));
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ghi_plan_clusters_base_object_insert(BaseObject $base_object) {
  if ($base_object->bundle() != PlanClusterManager::BASE_OBJECT_BUNDLE_GOVERNING_ENTITY) {
    // We act only on cluster base objects.
    return;
  }
  /** @var \Drupal\ghi_base_objects\ApiObjects\BaseObjectInterface $plan_object */
  $plan_object = $base_object->get('field_plan')->entity;
  if (!$plan_object || !$plan_object instanceof Plan) {
    // Bail if there is no plan base object associated to the cluster object.
    return;
  }
  // Load all sections which reference the plan object.
  $sections = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => SectionManager::SECTION_BUNDLES,
    PlanCluster::BASE_OBJECT_FIELD_NAME => $plan_object->id(),
  ]);
  if (!empty($sections)) {
    foreach ($sections as $section) {
      // Trigger a save, so that ghi_plan_clusters_section_post_save() get's
      // called.
      $section->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ghi_plan_clusters_form_node_plan_cluster_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->buildEntity($form, $form_state);
  if (!$entity instanceof PlanCluster) {
    return;
  }

  $object = $entity->getBaseObject();

  // Always disable the base object field if the cluster has a base object set
  // already. There is no use case to change it. Display it for convenience.
  if ($object instanceof GoverningEntity) {
    $field_name = PlanCluster::BASE_OBJECT_FIELD_NAME;
    $form[$field_name]['#disabled'] = !\Drupal::currentUser()->hasPermission('administer site configuration');
    $form[$field_name]['widget'][0]['target_id']['#description'] = t('The base object cannot be changed after the initial creation of a @entity_type_label page. <a href="@base_object_edit_url" target="_blank">Edit @label</a>', [
      '@entity_type_label' => strtolower($entity->type->entity->label()),
      '@base_object_edit_url' => $object->toUrl('edit-form')->toString(),
      '@label' => $object->label(),
    ]);
  }

  $section = $entity->getParentNode();

  // Always disable the section reference if the cluster has a reference set
  // already. There is no use case to change it. Display it for convenience.
  if ($section instanceof SectionNodeInterface) {
    $field_name = PlanCluster::SECTION_REFERENCE_FIELD_NAME;
    $form[$field_name]['#disabled'] = !\Drupal::currentUser()->hasPermission('administer site configuration');
    $form[$field_name]['widget'][0]['target_id']['#description'] = t('The section cannot be changed after the initial creation of a @entity_type_label page. <a href="@section_url" target="_blank">View @label</a>', [
      '@entity_type_label' => strtolower($entity->type->entity->label()),
      '@section_url' => $section->toUrl()->toString(),
      '@label' => $section->label(),
    ]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ghi_plan_clusters_node_presave(EntityInterface $node) {
  if ($node instanceof PlanCluster && $node->hasField(PlanCluster::SECTION_REFERENCE_FIELD_NAME)) {
    // Just make sure that this node has a valid reference to a section node.
    $parent_node = $node->getParentNode();
    $stored_parent_node = $node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->entity;
    if ($parent_node && (!$stored_parent_node || $parent_node->id() != $stored_parent_node->id())) {
      $node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->setValue([
        'target_id' => $parent_node->id(),
      ]);
    }
    if ($node->get(PlanCluster::SECTION_REFERENCE_FIELD_NAME)->isEmpty()) {
      $node->setUnpublished();
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function ghi_plan_clusters_entity_delete(EntityInterface $entity) {
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  if ($entity instanceof NodeInterface && SubpageHelper::isBaseTypeNode($entity)) {
    // Delete cluster subpages for this base node.
    $plan_cluster_manager->deleteSubpagesForBaseNode($entity);
  }
  if ($entity instanceof GoverningEntity) {
    // Delete the cluster page for this governing entity base object.
    $cluster_subpage = $plan_cluster_manager->loadClusterSubpageForBaseObject($entity);
    if ($cluster_subpage) {
      $cluster_subpage->delete();
    }
  }
}

/**
 * Implements hook_is_subpage_type().
 */
function ghi_plan_clusters_is_subpage_type($node_type) {
  return in_array($node_type, [PlanClusterManager::NODE_BUNDLE_PLAN_CLUSTER]);
}

/**
 * Implements hook_custom_subpages_alter().
 */
function ghi_plan_clusters_custom_subpages_alter(array &$subpages, NodeInterface $node, NodeTypeInterface $node_type) {
  if ($node_type->id() != PlanClusterManager::NODE_BUNDLE_PLAN_CLUSTER) {
    return;
  }
  // The cluster subpages should already be there, as added by
  // SubpageManager::getCustomSubpagesForBaseNode(). We validate the list here
  // and make sure to filter out plan clusters that don't have a base object
  // associated.
  $subpages = array_filter($subpages, function (NodeInterface $node) {
    return !$node instanceof PlanCluster || !empty($node->getBaseObject());
  });
}

/**
 * Implements hook_get_base_type_node_alter().
 */
function ghi_plan_clusters_get_base_type_node_alter(&$base_type_node, NodeInterface $node) {
  if ($node->bundle() != PlanClusterManager::NODE_BUNDLE_PLAN_CLUSTER) {
    return NULL;
  }
  $plan_cluster_manager = ghi_plan_clusters_get_manager_service();
  $base_type_node = $plan_cluster_manager->loadSectionForClusterNode($node);
}
