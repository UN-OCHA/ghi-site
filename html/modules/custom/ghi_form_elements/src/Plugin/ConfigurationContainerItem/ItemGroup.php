<?php

namespace Drupal\ghi_form_elements\Plugin\ConfigurationContainerItem;

use Drupal\Core\Form\FormStateInterface;
use Drupal\ghi_form_elements\ConfigurationContainerItemGroupInterface;
use Drupal\ghi_form_elements\ConfigurationContainerItemPluginBase;
use Drupal\ghi_form_elements\Traits\OptionalLinkTrait;

/**
 * Provides an entity counter item for configuration containers.
 *
 * @ConfigurationContainerItem(
 *   id = "item_group",
 *   label = @Translation("Item group"),
 *   description = @Translation("This item groups several others."),
 * )
 */
class ItemGroup extends ConfigurationContainerItemPluginBase implements ConfigurationContainerItemGroupInterface {

  use OptionalLinkTrait;

  /**
   * {@inheritdoc}
   */
  public function getLink() {
    if (empty($this->config['link'])) {
      return NULL;
    }
    return $this->getLinkFromConfiguration($this->config['link'], $this->getContext());
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm($element, FormStateInterface $form_state) {
    $element = parent::buildForm($element, $form_state);
    $configuration = $this->getPluginConfiguration();

    $element['id'] = [
      '#type' => 'machine_name',
      '#default_value' => array_key_exists('id', $this->config) ? $this->config['id'] : NULL,
      '#machine_name' => [
        'exists' => [static::class, 'checkExistingGroup'],
        'replace_pattern' => '[^a-z0-9_.]+',
        'source' => array_merge($element['#array_parents'], ['label']),
      ],
    ];

    if (!empty($configuration['link'])) {
      $element['link'] = [
        '#type' => 'optional_link',
        '#title' => $this->t('Add a link to this element'),
        '#default_value' => $this->config['link'] ?? [],
        '#element_context' => $this->getContext(),
      ];
    }

    return $element;
  }

  /**
   * Check for the existance of a group with the same id.
   *
   * @param string $id
   *   An id generated by the machine name field.
   * @param array $element
   *   The form definition of the current element.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current form state object.
   *
   * @return bool
   *   Whether a group with the given id already exists.
   */
  public static function checkExistingGroup($id, array $element, FormStateInterface $form_state) {
    $items = $form_state->get('items');
    if (empty($items)) {
      return FALSE;
    }
    foreach ($items as $item) {
      if ($item['item_type'] != 'item_group') {
        continue;
      }
      if ($item['config']['id'] == $id) {
        return TRUE;
      }
    }
    return FALSE;
  }

}
