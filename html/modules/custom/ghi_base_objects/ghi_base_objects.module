<?php

/**
 * @file
 * Contains ghi_base_objects.module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ghi_base_objects\ApiObjects\Location;
use Drupal\ghi_base_objects\Entity\BaseObject;
use Drupal\ghi_base_objects\Helpers\BaseObjectHelper;
use Drupal\hpc_api\Query\EndpointQuery;
use Drupal\hpc_common\Helpers\ArrayHelper;
use Drupal\hpc_common\Helpers\RequestHelper;
use Drupal\layout_builder\SectionStorageInterface;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_help().
 */
function ghi_base_objects_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ghi_base_objects module.
    case 'help.page.ghi_base_objects':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides logic and data migration handling for API base objects') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cache_flush().
 *
 * Clean up import files.
 */
function ghi_base_objects_cache_flush() {
  hpc_api_clear_directory(Location::GEO_JSON_DIR, '/.*\.geojson/');
}

/**
 * Implements hook_layout_builder_view_context_alter().
 */
function ghi_base_objects_layout_builder_view_context_alter(array &$contexts, ?SectionStorageInterface $section_storage = NULL, $sample = FALSE) {
  // See if there is a context.
  $entity_context = $contexts['layout_builder.entity'] ?? ($contexts['entity'] ?? ($contexts['node'] ?? NULL));
  if (!$entity_context || !$entity_context->hasContextValue()) {
    return;
  }
  $entity = $entity_context->getContextValue();
  // Reload the entity so that context extraction can work based on the entity
  // as it is currently stored in the database. The entity_context is created
  // when the layout editing session is created, and if data objects are added
  // later to an entity, that change would otherwise not be reflected here.
  $entity = $entity->id() ? \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId())->load($entity->id()) : $entity;
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (!$entity->id() || !$route_name || strpos($route_name, 'entity.entity_view_display.') === 0) {
    // This is the manage display form or some other config form with a sample
    // entity. We only want to make sure that we provide some dummy context so
    // that page elements that depend on a base object can be selected.
    $types = \Drupal::entityTypeManager()->getStorage('base_object_type')->loadMultiple();
    foreach ($types as $type) {
      $entity = \Drupal::service('layout_builder.sample_entity_generator')->get('base_object', $type->id());
      $context = EntityContext::fromEntity($entity, $type->label());
      $context->getContextDefinition()->addConstraint('Bundle', $type->getEntityTypeId());
      $contexts[$type->id()] = $context;
    }
  }
  elseif ($base_objects = BaseObjectHelper::getBaseObjectsFromNode($entity)) {
    // This is an actual entity page.
    foreach ($base_objects as $base_object) {
      $context = EntityContext::fromEntity($base_object, $base_object->label());
      $context->getContextDefinition()->addConstraint('Bundle', $base_object->getEntityTypeId());
      $contexts[$base_object->getUniqueIdentifier()] = $context;
    }
  }
}

/**
 * Implements hook_theme().
 */
function ghi_base_objects_theme() {
  $theme = [];
  $theme['base_object'] = [
    'render element' => 'elements',
    'file' => 'base_object.page.inc',
    'template' => 'base_object',
  ];
  $theme['base_object_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'base_object.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_base_object().
 */
function ghi_base_objects_preprocess_base_object(&$variables) {
  // Mark all term pages as admin pages for JS.
  $variables['#attached']['drupalSettings']['path']['currentPathIsAdmin'] = TRUE;
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function ghi_base_objects_preprocess_breadcrumb(&$variables) {
  // Don't consider base objects as public content pages.
  $entity = RequestHelper::getCurrentEntityObject();
  if (!$entity instanceof BaseObject) {
    return;
  }
  if ($variables['breadcrumb']) {
    $variables['breadcrumb'][0]['attributes']['data'] = 'data-gin-toolbar-escape-admin';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ghi_base_objects_theme_suggestions_base_object(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#base_object'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'base_object__' . $sanitized_view_mode;
  $suggestions[] = 'base_object__' . $entity->bundle();
  $suggestions[] = 'base_object__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'base_object__' . $entity->id();
  $suggestions[] = 'base_object__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the description to administrative term listings of plan type terms, so
 * that the 2 "Other" types can be told apart.
 * Adjust the help message in case the flat taxonomy module is used and the
 * vocabulary is set to "flat".
 */
function ghi_base_objects_form_taxonomy_overview_terms_alter(&$form, FormStateInterface &$form_state) {
  foreach (Element::children($form['terms']) as $key) {
    /** @var \Drupal\taxonomy\Entity\Term $term */
    $term = $form['terms'][$key]['#term'];
    if (!empty($term->getDescription())) {
      $form['terms'][$key]['term']['#title'] .= ' (' . $term->getDescription() . ')';
    }
  }
  /** @var \Drupal\taxonomy\VocabularyInterface $vocabulary */
  $vocabulary = $form_state->get(['taxonomy', 'vocabulary']);
  if ($vocabulary) {
    if ($vocabulary->getThirdPartySetting('flat_taxonomy', 'flat')) {
      $form['help']['message']['#markup'] = t('You can reorganize the terms in %capital_name using their drag-and-drop handles.', [
        '%capital_name' => Unicode::ucfirst($vocabulary->label()),
      ]);
    }
  }
}

/**
 * Implements hook_migrate_MIGRATE_ID_prepare_row().
 */
function ghi_base_objects_migrate_plan_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $raw_data = (object) $row->getSource()['raw'];

  /** @var \Drupal\hpc_api\Query\EndpointQuery $query */
  $query = \Drupal::service('hpc_api.endpoint_query');

  $has_published_version = FALSE;
  $published_version = NULL;

  // Fetching plan data with version=current for plans without a published
  // version, will result in an empty planVersion property, which will result
  // in us not being able to fetch the plan name. So we fetch current version
  // data whenever possible, and if not possible, we fetch the unpublished
  // version data, but set the plan node to unpublished in Drupal.
  $plan_tags = $raw_data->planTags;

  if (!empty($plan_tags)) {
    $published_versions = array_filter($plan_tags, function ($version) {
      return $version['public'] == TRUE;
    });
    if (!empty($published_versions)) {
      // There can be multiple public plan tags, we want the one with the
      // highest number.
      ArrayHelper::sortArray($published_versions, 'name', EndpointQuery::SORT_DESC, SORT_STRING);
    }
    $published_version = !empty($published_versions) ? reset($published_versions) : NULL;
    $has_published_version = $published_version !== NULL;
  }

  $query->setArguments([
    'endpoint' => 'plan/' . $raw_data->id,
    'api_version' => 'v2',
    'auth_method' => EndpointQuery::AUTH_METHOD_API_KEY,
  ]);
  if ($has_published_version) {
    // If we have plan version tags, let's fetch the most current one.
    $query->setEndpointArgument('version', 'current');
  }
  $plan_data = $query->getData();
  if (!$plan_data) {
    throw new MigrateSkipRowException();
  }

  $start_date = !empty($plan_data->planVersion->startDate) ? date('Y-m-d', strtotime($plan_data->planVersion->startDate)) : NULL;
  $end_date = !empty($plan_data->planVersion->endDate) ? date('Y-m-d', strtotime($plan_data->planVersion->endDate)) : NULL;
  $document_published_date = !empty($plan_data->planVersion->pdfPublishDate) ? date('Y-m-d', strtotime($plan_data->planVersion->pdfPublishDate)) : NULL;

  $row->setSourceProperty('version_tag', $published_version ? $published_version['name'] : NULL);
  $row->setSourceProperty('released', !empty($plan_data->isReleased) ? $plan_data->isReleased : FALSE);
  $row->setSourceProperty('is_part_of_gho', !empty($plan_data->planVersion->isPartOfGHO) ? $plan_data->planVersion->isPartOfGHO : FALSE);
  $row->setSourceProperty('name', !empty($plan_data->planVersion->name) ? $plan_data->planVersion->name : NULL);
  $row->setSourceProperty('short_name', !empty($plan_data->planVersion->shortName) ? $plan_data->planVersion->shortName : NULL);
  $row->setSourceProperty('subtitle', !empty($plan_data->planVersion->subtitle) ? $plan_data->planVersion->subtitle : NULL);
  $row->setSourceProperty('comments', !empty($plan_data->planVersion->comments) ? $plan_data->planVersion->comments : NULL);
  $row->setSourceProperty('language', !empty($plan_data->planVersion->planLanguage) ? $plan_data->planVersion->planLanguage : NULL);
  $row->setSourceProperty('plan_cluster_type', !empty($plan_data->planVersion->planClusterType) ? $plan_data->planVersion->planClusterType : NULL);
  $row->setSourceProperty('plan_date_start', $start_date);
  $row->setSourceProperty('plan_date_end', $end_date);
  $row->setSourceProperty('document_published_on', $document_published_date);

  // Parse the categories to retrieve the categories.
  if (!empty($plan_data->categories)) {
    // Plan type.
    $plan_types = array_filter($plan_data->categories, function ($item) {
      return $item->group == 'planType';
    });
    if (!empty($plan_types)) {
      // There should really be only one.
      $plan_type = reset($plan_types);
      $row->setSourceProperty('plan_type_id', $plan_type->id);
    }

    // Plan costing.
    $plan_costing = array_filter($plan_data->categories, function ($item) {
      return $item->group == 'planCosting';
    });
    if (!empty($plan_costing)) {
      // There should really be only one.
      $plan_costing = reset($plan_costing);
      $row->setSourceProperty('plan_costing_id', $plan_costing->id);
    }
  }

  // Country references.
  if (!empty($raw_data->locations)) {
    $countries = array_filter($raw_data->locations, function ($location) {
      return $location['adminLevel'] == 0;
    });
    $row->setSourceProperty('countries', !empty($countries) ? $countries : []);
  }
  $row->setSourceProperty('focus_country_id', $plan_data->focusCountry?->id ?? NULL);

  // Country references.
  if (!empty($plan_data->planVersion->coordinatingOrganizations)) {
    $plan_coordinator = array_map(function ($organization) {
      return $organization->abbreviation;
    }, $plan_data->planVersion->coordinatingOrganizations);
    $row->setSourceProperty('plan_coordinator', $plan_coordinator);
  }

  // Then get the year.
  if (!empty($plan_data->years)) {
    // There should really be only one.
    $year = reset($plan_data->years);
    $row->setSourceProperty('plan_year', $year->year);
  }

  unset($plan_data);
}

/**
 * Implements hook_migrate_prepare_row().
 */
function ghi_base_objects_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  if (!in_array($migration->id(), ['plan_entity', 'governing_entity'])) {
    return;
  }

  $raw_data = (object) $row->getSource()['raw'];
  $plan_object = BaseObjectHelper::getBaseObjectFromOriginalId($raw_data->plan_id, 'plan');
  if (!$plan_object) {
    // No associated plan node found.
    throw new MigrateSkipRowException();
  }

  if (empty($raw_data->name) && !empty($raw_data->description)) {
    $row->setSourceProperty('name', Unicode::truncate($raw_data->description, 255, TRUE, TRUE));
  }

}

/**
 * Implements hook_form_alter().
 */
function ghi_base_objects_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityForm) {
    return;
  }
  /** @var \Drupal\ghi_base_objects\Migrate\MigratedEntityManager $migrated_entity_manager */
  $migrated_entity_manager = \Drupal::service('migrated_entity_manager');
  $migrated_entity_manager->entityFormAlter($form, $form_state);
}

/**
 * Implements hook_autologout_prevent().
 *
 * Don't logout using while on a batch processing page.
 */
function ghi_base_objects_autologout_prevent() {
  // getPath is used because Url::fromRoute('<current>')->toString() doesn't
  // give correct path for XHR request.
  $url = ltrim(\Drupal::service('path.current')->getPath(), '/');
  if (str_starts_with($url, 'batch')) {
    return TRUE;
  }
}
