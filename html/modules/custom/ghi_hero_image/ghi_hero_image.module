<?php

/**
 * @file
 * Contains hook implementations for the GHI Hero Image module.
 */

use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_page().
 *
 * This is used to add the configured hero image (or a default image) to the
 * page title region.
 *
 * This code assumes that there is a page_title region in the theme.
 */
function ghi_hero_image_preprocess_page(&$variables) {
  $region_name = 'page_title';
  if (!array_key_exists($region_name, $variables['page'])) {
    return;
  }

  $request_stack = \Drupal::requestStack();
  $request = $request_stack->getMasterRequest();
  /** @var \Drupal\node\Entity\Node $node */
  $node = $request->attributes->has('node') ? $request->attributes->get('node') : NULL;
  if (!$node instanceof NodeInterface || !$node->getFieldDefinitions() || !$node->access()) {
    // No access to the node.
    return;
  }

  $status = $request_stack->getCurrentRequest()->attributes->get('exception');
  if ($status && $status->getStatusCode() >= 400) {
    // Probably another node related access denied or not found page, maybe for
    // subpages. We don't want to show the image here either.
    return;
  }

  $hero_image_field_definitions = array_filter($node->getFieldDefinitions(), function ($field_definition) {
    return $field_definition->getType() == 'ghi_hero_image';
  });
  if (empty($hero_image_field_definitions)) {
    return;
  }

  // If there are multiple, we only take the first one.
  $hero_image_field_definition = reset($hero_image_field_definitions);

  // We do not check if the field has actual values, because we might want to
  // show a default image.
  $hero_image_field = $node->get($hero_image_field_definition->getName());

  // Get the hero image for the current page.
  $hero_image = $hero_image_field->view([
    'label' => 'hidden',
    'settings' => [
      'responsive_image_style' => 'hero',
      'image_link' => NULL,
    ],
  ]);
  if ($hero_image) {
    $hero_image['#label_display'] = 'hidden';
    $variables['page'][$region_name] = ['hero_image' => $hero_image] + $variables['page'][$region_name];
  }

}

/**
 * Implements hook_cache_flush().
 *
 * Flush the external image cache. By default, imagecache_external only allows
 * to configure flushing max once a day, which is not enough for us.
 */
function ghi_hero_image_cache_flush() {
  if (\Drupal::moduleHandler()->moduleExists('imagecache_external') && function_exists('imagecache_external_get_directory_path')) {
    // A bit extreme to delete the full external storage, but
    // imagecache_external_flush_cache() doesn't work when not called from
    // cron. The directory will be recreated without any problem for the first
    // image that get's downloaded and cached, so this is ok.
    $directory = imagecache_external_get_directory_path();
    \Drupal::service('file_system')->deleteRecursive($directory);
  }
}
