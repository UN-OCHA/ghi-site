<?php

/**
 * @file
 * Contains hook implementations for the GHI Hero Image module.
 */

use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\ghi_hero_image\HeroImageWidgetCropManager;
use Drupal\layout_builder\Form\OverridesEntityForm;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_html().
 */
function ghi_hero_image_preprocess_html(&$variables) {
  $config = \Drupal::config('ghi_hero_image.config');
  if ($config->get('force_letterbox')) {
    $variables['attributes']['class'][] = 'force-letterbox';
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * This is used to add the configured hero image (or a default image) to the
 * page title region.
 *
 * This code assumes that there is a page_title region in the theme.
 */
function ghi_hero_image_preprocess_page(&$variables) {
  $region_name = 'page_image';
  if (!array_key_exists($region_name, $variables['page'])) {
    return;
  }

  /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
  $request_stack = \Drupal::requestStack();
  $request = $request_stack->getMainRequest();
  /** @var \Drupal\node\Entity\Node $node */
  $node = $request->attributes->has('node') ? $request->attributes->get('node') : NULL;
  if (!$node instanceof NodeInterface || !$node->getFieldDefinitions() || !$node->access()) {
    // No access to the node.
    return;
  }

  $status = $request_stack->getCurrentRequest()->attributes->get('exception');
  if ($status && $status->getStatusCode() >= 400) {
    // Probably another node related access denied or not found page, maybe for
    // subpages. We don't want to show the image here either.
    return;
  }

  $hero_image_field_definitions = array_filter($node->getFieldDefinitions(), function ($field_definition) {
    return $field_definition->getType() == 'ghi_hero_image';
  });
  if (empty($hero_image_field_definitions)) {
    return;
  }

  // If there are multiple, we only take the first one.
  $hero_image_field_definition = reset($hero_image_field_definitions);

  // We do not check if the field has actual values, because we might want to
  // show a default image or the image from a parent node.
  $hero_image_field = $node->get($hero_image_field_definition->getName());

  // Get the hero image for the current page.
  $hero_image = $hero_image_field->view([
    'label' => 'hidden',
    'settings' => [
      'responsive_image_style' => 'hero',
      'image_link' => NULL,
      'include_credits' => TRUE,
    ],
  ]);
  if ($hero_image) {
    $hero_image['#label_display'] = 'hidden';
    $variables['page'][$region_name] = ['hero_image' => $hero_image] + $variables['page'][$region_name];
  }

}

/**
 * Implements hook_cache_flush().
 *
 * Flush the external image cache. By default, imagecache_external only allows
 * to configure flushing max once a day, which is not enough for us.
 */
function ghi_hero_image_cache_flush() {
  if (\Drupal::moduleHandler()->moduleExists('imagecache_external') && function_exists('imagecache_external_get_directory_path')) {
    // A bit extreme to delete the full external storage, but
    // imagecache_external_flush_cache() doesn't work when not called from
    // cron. The directory will be recreated without any problem for the first
    // image that get's downloaded and cached, so this is ok.
    $directory = imagecache_external_get_directory_path();
    \Drupal::service('file_system')->deleteRecursive($directory);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function ghi_hero_image_entity_extra_field_info() {
  $return = [];
  $entityFieldManager = \Drupal::service('entity_field.manager');
  foreach (NodeType::loadMultiple() as $node_type) {
    /** @var \Drupal\node\NodeTypeInterface $node_type */
    $fields = $entityFieldManager->getFieldDefinitions('node', $node_type->id());
    if (empty(array_intersect_key($fields, array_flip(HeroImageWidgetCropManager::IMAGE_FIELDS)))) {
      continue;
    }
    $return['node'][$node_type->id()]['form']['image_crop'] = [
      'label' => t('Image crop'),
      'description' => t('Image crop control'),
      'weight' => -2,
      'visible' => TRUE,
    ];
  }
  return $return;
}

/**
 * Implements hook_form_alter().
 */
function ghi_hero_image_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof ContentEntityFormInterface || $form_object instanceof OverridesEntityForm) {
    return;
  }
  /** @var \Drupal\ghi_hero_image\HeroImageWidgetCropManager $image_widget_crop_manager */
  $image_widget_crop_manager = \Drupal::service('hero_image_widget_crop.manager');
  $image_widget_crop_manager->contentEntityFormAlter($form, $form_state);

  if (!empty($form['image_crop']) && !empty($form['field_hero_image'])) {
    $form['image_crop']['#states'] = [
      'visible' => [
        [
          ':input[name="field_hero_image[0][source]"]' => ['value' => 'hpc_webcontent_file_attachment'],
        ],
        [
          ':input[name="field_hero_image[0][source]"]' => ['value' => 'smugmug_api'],
        ],
      ],
    ];
  }
}

/**
 * Implements hook_normalize_content_alter().
 */
function ghi_hero_image_normalize_content_alter(&$data) {
  foreach (HeroImageWidgetCropManager::IMAGE_FIELDS as $field_name) {
    if (empty($data[$field_name])) {
      continue;
    }
    unset($data[$field_name][0]['width']);
    unset($data[$field_name][0]['height']);
  }
}

/**
 * Implements hook_tokens_alter().
 */
function ghi_hero_image_tokens_alter(array &$replacements, array $context, BubbleableMetadata $bubbleable_metadata) {
  if ($context['type'] != 'node' || empty($context['data']['node'])) {
    return;
  }
  /** @var \Drupal\node\NodeInterface $node */
  $node = $context['data']['node'];
  if (!$node->hasField('field_hero_image')) {
    return;
  }

  /** @var \Drupal\ghi_hero_image\HeroImageManager $hero_image_manager */
  $hero_image_manager = \Drupal::service('hero_image.manager');
  $hero_image_manager->tokenAlter($replacements, $node);
}
