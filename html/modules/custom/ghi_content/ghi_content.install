<?php

/**
 * @file
 * Contains update hooks for the GHI Content module.
 */

use Drupal\Core\File\FileSystem;
use Drupal\Core\Utility\UpdateException;
use Drupal\ghi_content\ContentManager\ArticleManager;
use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;

/**
 * Implements hook_requirements().
 */
function ghi_content_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    $remote_sources = \Drupal::config('ghi_content.remote_sources')->get();
    foreach ($remote_sources as $key => $config) {
      /** @var \Drupal\ghi_content\RemoteSource\RemoteSourceInterface $remote_source */
      $remote_source = \Drupal::service('plugin.manager.remote_source')->createInstance($key);
      $connection_status = $remote_source->checkConnection();
      $string_args = [
        '@url' => $remote_source->getRemoteEndpointUrl(),
      ];
      $requirements['ghi_content_remote_source_' . $key] = [
        'title' => $remote_source->getPluginLabel(),
        'severity' => $connection_status ? REQUIREMENT_OK : REQUIREMENT_ERROR,
        'value' => $connection_status ? t('Success') : t('Failed'),
        'description' => $connection_status ? t('Connection to the remote source at <em>@url</em> successful.', $string_args) : t('Connection to the remote source at <em>@url</em> failed.', $string_args),
      ];

    }
  }
  return $requirements;
}

/**
 * Create thumbnail directory for articles.
 */
function ghi_content_update_9001(&$sandbox) {
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');
  $directory = ArticleManager::THUMBNAIL_DIRECTORY;
  if (!$file_system->prepareDirectory($directory, FileSystem::CREATE_DIRECTORY)) {
    throw new UpdateException('Directory not created');
  }
}

/**
 * Update remote sources config object.
 */
function ghi_content_update_9002(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('ghi_content.remote_sources');
  $configured_remote_sources = $config->getRawData();
  if (array_key_exists('gho_ncms', $configured_remote_sources)) {
    $configured_remote_sources['hpc_content_module'] = $configured_remote_sources['gho_ncms'];
    unset($configured_remote_sources['gho_ncms']);
    $config->setData($configured_remote_sources);
    $config->save(TRUE);
  }
}

/**
 * Update remote source for articles.
 */
function ghi_content_update_9003(&$sandbox) {
  /** @var \Drupal\node\NodeInterface[] $articles */
  $articles = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'article',
    'field_remote_article.remote_source' => 'gho_ncms',
  ]);
  foreach ($articles as $article) {
    $article->get('field_remote_article')->remote_source = 'hpc_content_module';
    $article->save();
  }
  return t('Updated remote sources for @count articles', [
    '@count' => count($articles),
  ]);
}

/**
 * Update remote source for paragraph components.
 */
function ghi_content_update_9004(&$sandbox) {
  $count = 0;
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple();
  foreach ($nodes as $node) {
    if (!$node->hasField(OverridesSectionStorage::FIELD_NAME)) {
      continue;
    }
    $sections = $node->get(OverridesSectionStorage::FIELD_NAME)->getValue();
    if (empty($sections)) {
      continue;
    }
    /** @var \Drupal\layout_builder\Section $section */
    $section = &$sections[0]['section'];
    $components = $section->getComponents();
    if (empty($components)) {
      continue;
    }
    foreach ($components as $component) {
      if ($component->getPluginId() !== 'paragraph') {
        continue;
      }
      $configuration = $component->get('configuration');
      if ($configuration['hpc']['article_select']['article']['remote_source'] != 'gho_ncms') {
        continue;
      }
      $configuration['hpc']['article_select']['article']['remote_source'] = 'hpc_content_module';
      $component->setConfiguration($configuration);
    }
    $node->get(OverridesSectionStorage::FIELD_NAME)->setValue($sections);
    $node->save();
    $count++;
  }
  return t('Updated remote sources for @count nodes', [
    '@count' => $count,
  ]);
}

/**
 * Rename migration tables to account for changed migration id.
 */
function ghi_content_update_9005(&$sandbox) {
  $table_map = [
    'migrate_map_articles_gho' => 'migrate_map_articles_hpc_content_module',
    'migrate_message_articles_gho' => 'migrate_message_articles_hpc_content_module',
  ];
  foreach ($table_map as $current_name => $new_name) {
    if (\Drupal::database()->schema()->tableExists($current_name)) {
      \Drupal::database()->schema()->renameTable($current_name, $new_name);
    }
  }
}

/**
 * Change image directory for articles.
 */
function ghi_content_update_9006(&$sandbox) {
  /** @var \Drupal\Core\File\FileSystem $file_system */
  $file_system = \Drupal::service('file_system');
  $directory = ArticleManager::IMAGE_DIRECTORY;
  if (!$file_system->prepareDirectory($directory, FileSystem::CREATE_DIRECTORY)) {
    throw new UpdateException('Directory not created');
  }

  // And delete the previous directory.
  $file_system->deleteRecursive('public://thumbnails');
}
