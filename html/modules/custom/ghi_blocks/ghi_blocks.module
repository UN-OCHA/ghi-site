<?php

/**
 * @file
 * Contains hook implementations for the GHI Blocks module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\ghi_blocks\Controller\BaseObjectReferenceController;
use Drupal\ghi_blocks\Controller\LayoutBuilderBlockController;
use Drupal\ghi_blocks\Helpers\GlobalSettingsHelper;
use Drupal\ghi_blocks\Plugin\Block\GHIBlockBase;
use Drupal\hpc_common\Helpers\UserHelper;
use Drupal\layout_builder\Plugin\Block\InlineBlock;
use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function ghi_blocks_theme($existing, $type, $theme, $path) {
  return [
    'document_link_box' => [
      'render element' => 'document',
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'document-link-box',
    ],
    'document_link_button' => [
      'variables' => [
        'button_label' => NULL,
        'document' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'document-link-button',
    ],
    'link_carousel' => [
      'variables' => [
        'items' => [],
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'link-carousel',
    ],
    'tab_container' => [
      'variables' => [
        'tabs' => [],
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'tab-container',
    ],
    'plan_overview_map' => [
      'variables' => [
        'chart_id' => NULL,
        'map_tabs' => NULL,
        'legend' => FALSE,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-overview-map',
    ],
    'plan_overview_map_modal' => [
      'variables' => [
        'items' => [],
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-overview-map-modal',
    ],
    'plan_attachment_map' => [
      'variables' => [
        'chart_id' => NULL,
        'sidebar' => NULL,
        'map_type' => NULL,
        'map_tabs' => NULL,
        'attachment_switcher' => NULL,
        'legend' => FALSE,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-attachment-map',
    ],
    'plan_operational_presence_map' => [
      'variables' => [
        'chart_id' => NULL,
        'chart_class' => NULL,
        'view_switcher' => NULL,
        'object_switcher' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-operational-presence-map',
    ],
    'plan_entity_logframe' => [
      'variables' => [
        'items' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-entity-logframe',
    ],
    'ajax_switcher' => [
      'variables' => [
        'options' => NULL,
        'element_key' => NULL,
        'default_value' => NULL,
        'wrapper_id' => NULL,
        'plugin_id' => NULL,
        'block_uuid' => NULL,
        'uri' => NULL,
        'query' => [],
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'ajax-switcher',
    ],
    'section_switcher' => [
      'variables' => [
        'title' => NULL,
        'sections' => [],
        'current_section' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'section-switcher',
    ],
    'year_switcher' => [
      'variables' => [
        'title' => NULL,
        'years' => [],
        'current_year' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'section-switcher',
    ],
    'plan_cluster_contacts' => [
      'variables' => [
        'contacts' => [],
        'show_email' => FALSE,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-cluster-contacts',
    ],
    'plan_status' => [
      'variables' => [
        'compact' => TRUE,
        'status' => NULL,
        'status_label' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'plan-status',
    ],
    'ghi_dropdown' => [
      'variables' => [
        'label' => NULL,
        'toggle_label' => NULL,
        'options' => [],
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'dropdown',
    ],
    'ghi_image' => [
      'variables' => [
        'url' => NULL,
        'style' => NULL,
        'responsive_image_style' => NULL,
        'caption' => NULL,
        'credit' => NULL,
        'alt' => NULL,
        'title' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'ghi-image',
    ],
    'ghi_message' => [
      'variables' => [
        'message' => NULL,
        'type' => NULL,
      ],
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'ghi-message',
    ],
    'mailing_list_subscribe' => [
      'render element' => 'element',
      'template' => 'mailing-list-subscribe',
    ],
  ];
}

/**
 * Implements hook_module_implements_alter().
 */
function ghi_blocks_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    // Move our hook_entity_type_alter() implementation to the end of the list.
    case 'plugin_filter_block_alter':
      if ($group = $implementations['ghi_blocks'] ?? NULL) {
        unset($implementations['ghi_blocks']);
        $implementations['ghi_blocks'] = $group;
      }
      break;
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function ghi_blocks_plugin_filter_block__layout_builder_alter(array &$definitions, array $extra) {
  $current_user = \Drupal::currentUser();
  if (!$current_user->hasPermission('use inline blocks')) {
    // Unset all inline blocks.
    foreach (array_keys($definitions) as $key) {
      if (strpos($key, 'inline_block:') !== 0) {
        continue;
      }
      unset($definitions[$key]);
    }
  }

  // Check if this is a page manager context, in which case we want to manually
  // restrict the available types. On all entity pages this is handled by the
  // layout_builder_restrictions module per entity bundle.
  $section_storage = $extra['section_storage'] ?? NULL;
  $is_page_manager = $section_storage ? $section_storage->getPluginId() == 'page_manager' : FALSE;
  if ($is_page_manager) {
    $blacklist = [
      'global_plan_overview_map',
      'global_key_figures',
      'global_plan_table',
    ];
    $definitions = array_filter($definitions, function ($definition) use ($blacklist) {
      if (in_array($definition['id'], $blacklist)) {
        return FALSE;
      }
      return in_array($definition['provider'], ['ghi_blocks', 'ghi_content']);
    });
  }
}

/**
 * Implements hook_library_info_alter().
 */
function ghi_blocks_library_info_alter(&$libraries, $extension) {
  if ($extension == 'common_design_subtheme' && isset($libraries['ghi-scrollable-table'])) {
    if (!\Drupal::config('ghi_blocks.table_settings')->get('scroll_indicator')) {
      // Disable the visual indicator for scrollable tables.
      unset($libraries['ghi-scrollable-table']);
    }
  }
}

/**
 * Implements hook_gin_lb_add_suggestions_alter().
 */
function ghi_blocks_gin_lb_add_suggestions_alter(&$add_suggestions, $variables, $hook) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'layout_builder.add_block' && $add_suggestions) {
    $add_suggestions = FALSE;
  }
  if ($route_name == 'layout_builder_ipe.entity.edit') {
    $add_suggestions = TRUE;
  }
  // Allow elements to declare whether they want to be rendered by Gin LB.
  if (array_key_exists('element', $variables) && is_array($variables['element']) && array_key_exists('#gin_lb_form_element', $variables['element'])) {
    $add_suggestions = $variables['element']['#gin_lb_form_element'];
  }
  elseif (array_key_exists('gin_lb_theme_suggestions', $variables) && $variables['gin_lb_theme_suggestions'] !== NULL) {
    $add_suggestions = $variables['gin_lb_theme_suggestions'];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ghi_blocks_preprocess_block(&$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  /** @var \Drupal\ghi_blocks\Plugin\Block\GHIBlockBase $block */
  $block = $block_manager->createInstance($variables['plugin_id'], $variables['configuration']);
  if (!$block instanceof GHIBlockBase) {
    return;
  }

  if ($variables['label'] == '<none>') {
    $variables['label'] = $block->label();
  }

  // Provide a support for block download links.
  if (!empty($variables['content']['#download_links'])) {
    $variables['download_links'] = $variables['content']['#download_links'];
    unset($variables['content']['#download_links']);
  }

  if (UserHelper::isAdministrator() && array_key_exists('#block_instance', $variables['elements']['content'])) {
    $icons = $block->getAdminIcons();
    $variables['icons'] = array_values($icons);
    if (array_key_exists('api_url', $icons)) {
      $variables['attributes']['class'][] = 'has-api-url-tooltip';
    }
  }

  // This is necessary to make sure that cache metadata from the block
  // correctly bubbles up the chain.
  // @see https://drupal.stackexchange.com/a/225569/8881
  $content = $variables['content'];
  CacheableMetadata::createFromRenderArray($variables)
    ->merge(CacheableMetadata::createFromRenderArray($content))
    ->applyTo($variables);
}

/**
 * Implements hook_contextual_links_alter().
 *
 * Disable contextual links to declutter the interface. If it wouldn't be for
 * layout builder who needs the contextual links for it's own interface, we
 * could just disable the module entirely.
 * See https://www.drupal.org/project/drupal/issues/3042516
 *
 * Also alter the contextual links for shared functionality of our own blocks.
 */
function ghi_blocks_contextual_links_alter(array &$links, $group, array $route_parameters) {
  $allowed_groups = ['layout_builder_block'];
  if (!in_array($group, $allowed_groups)) {
    $links = [];
    return;
  }
  /** @var \Drupal\ghi_blocks\ContextualLinks\BlockHandler $contextual_links_block_handler */
  $contextual_links_block_handler = \Drupal::service('ghi_blocks.contextual_links.block_handler');
  $contextual_links_block_handler->alterLinks($links, $group, $route_parameters);
}

/**
 * Implements hook_entity_update().
 */
function ghi_blocks_entity_update(EntityInterface $entity) {
  $controller = LayoutBuilderBlockController::create(\Drupal::getContainer());
  $controller->updateEntity($entity);
}

/**
 * Implements hook_link_alter().
 *
 * Show the block selection in a modal instead of the offcanvas sidebar.
 * Boldly copied from the Layout Builder Browser module.
 */
function ghi_blocks_link_alter(&$variables) {

  /** @var Drupal\Core\Url $url */
  $url = $variables['url'];

  if (!$url->isRouted()) {
    return;
  }

  $route_name = $url->getRouteName();

  $allowed_routes = [
    'layout_builder.choose_block',
    'layout_builder.remove_block',
    'ghi_blocks.import_block',
    'ghi_blocks.show_block_config',
    'ghi_blocks.hide_block',
    'ghi_blocks.unhide_block',
  ];
  if (!in_array($route_name, $allowed_routes)) {
    // All other routes are already handled by the Layout Buidler Modal module.
    return;
  }

  if (in_array('use-ajax', $variables['options']['attributes']['class'])) {
    $config = \Drupal::config('layout_builder_modal.settings');
    $data_dialog_options = Json::encode([
      'width' => $config->get('modal_width'),
      'height' => $config->get('modal_height'),
      'target' => 'layout-builder-modal',
      'autoResize' => $config->get('modal_autoresize'),
      'modal' => TRUE,
    ]);
    $variables['options']['attributes']['data-dialog-options'] = $data_dialog_options;
    $variables['options']['attributes']['data-dialog-type'] = 'dialog';
    unset($variables['options']['attributes']['data-dialog-renderer']);
  }
}

/**
 * Implements hook_form_alter().
 */
function ghi_blocks_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'layout_builder') !== FALSE || !empty($form['#ghi_modal_form'])) {
    $form['#attributes']['class'][] = 'ghi-glb-form';
    $form['#attached']['library'][] = 'system/admin';
    $form['#attached']['library'][] = 'ghi_blocks/layout_builder_gin';
    $form['#attached']['library'][] = 'ghi_blocks/layout_builder_modal_admin';
    if (array_key_exists('placeholders', $form)) {
      $form['placeholders']['#attached']['library'][] = 'ghi_blocks/layout_builder_gin';
      $form['placeholders']['#attached']['library'][] = 'ghi_blocks/layout_builder_modal_admin';
    }
    // Disable the "Revert to defaults" button.
    if (array_key_exists('actions', $form) && array_key_exists('revert', $form['actions'])) {
      $form['actions']['revert']['#access'] = FALSE;
    }
  }

  $confirm_forms = [
    'layout_builder_discard_changes',
    'layout_builder_revert_overrides',
  ];
  if (in_array($form_id, $confirm_forms)) {
    /** @var \Drupal\ghi_blocks\LayoutBuilder\LayoutBuilderFormAlter $layout_builder_form_alter */
    $layout_builder_form_alter = \Drupal::service('ghi_blocks.layout_builder_form_alter');
    $layout_builder_form_alter->alterConfirmationForm($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Used to add warnings for removed base object references.
 */
function ghi_blocks_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!$node->hasField(OverridesSectionStorage::FIELD_NAME) || !$node->hasField('field_base_objects')) {
    // No overrideable node or not base object references available.
    return;
  }
  $controller = BaseObjectReferenceController::create(\Drupal::getContainer());
  $controller->nodeFormAlter($form, $form_state);
}

/**
 * Implements hook_FORM_ID_alter().
 */
function ghi_blocks_form_layout_builder_add_block_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $component = $form_state->get('layout_builder__component');
  $plugin = $component->getPlugin();
  if ($plugin instanceof GHIBlockBase) {
    $plugin->blockFormAlter($form, $form_state);
  }
  if ($plugin instanceof InlineBlock) {
    /** @var \Drupal\ghi_blocks\LayoutBuilder\LayoutBuilderFormAlter $layout_builder_form_alter */
    $layout_builder_form_alter = \Drupal::service('ghi_blocks.layout_builder_form_alter');
    $layout_builder_form_alter->alterInlineBlockForm($form, $form_state);
  }

}

/**
 * Implements hook_FORM_ID_alter().
 */
function ghi_blocks_form_layout_builder_update_block_alter(array &$form, FormStateInterface $form_state, $form_id) {
  [$section_storage, $delta, , $uuid] = $form_state->getBuildInfo()['args'];
  $component = $section_storage->getSection($delta)->getComponent($uuid);
  $plugin = $component->getPlugin();
  if ($plugin instanceof GHIBlockBase) {
    $plugin->blockFormAlter($form, $form_state);
  }
  if ($plugin instanceof InlineBlock) {
    /** @var \Drupal\ghi_blocks\LayoutBuilder\LayoutBuilderFormAlter $layout_builder_form_alter */
    $layout_builder_form_alter = \Drupal::service('ghi_blocks.layout_builder_form_alter');
    $layout_builder_form_alter->alterInlineBlockForm($form, $form_state);
  }

}

/**
 * Implements hook_FORM_ID_alter().
 */
function ghi_blocks_form_layout_builder_import_block_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $component = $form_state->get('layout_builder__component') ?? NULL;
  $plugin = $component ? $component->getPlugin() : NULL;
  if (!$plugin instanceof GHIBlockBase) {
    return;
  }
  $plugin->blockFormAlter($form, $form_state);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function ghi_blocks_node_presave(NodeInterface $node) {
  if (!$node->hasField(OverridesSectionStorage::FIELD_NAME)) {
    // We only process nodes that use layout builder.
    return;
  }

  /** @var \Drupal\ghi_content\ContentManager\ArticleManager $article_manager */
  $controller = BaseObjectReferenceController::create(\Drupal::getContainer());
  $controller->cleanupDataBlocks($node);
}

/**
 * Implements hook_page_attachments().
 */
function ghi_blocks_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'ghi_blocks/throbber';
  if (\Drupal::currentUser()->isAnonymous()) {
    // Nothing to do for anonymous.
    return;
  }
  if (ghi_blocks_is_layout_builder_route()) {
    $attachments['#attached']['library'][] = 'ghi_blocks/layout_builder_gin';
  }
  $attachments['#attached']['library'][] = 'ghi_blocks/gin';
}

/**
 * Returns true if the current route is a layout builder route.
 *
 * @return bool
 *   Returns true for layout builder routes.
 */
function ghi_blocks_is_layout_builder_route() {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (!$route_name) {
    return FALSE;
  }
  if ($route_name == 'layout_builder_ipe.entity.edit' || preg_match('/^(layout_builder\.([^.]+\.)?)/', $route_name)) {
    return TRUE;
  }
  $page_parameters = \Drupal::routeMatch()->getRawParameters()->all();
  if (array_key_exists('machine_name', $page_parameters) && array_key_exists('step', $page_parameters)) {
    return $route_name == 'entity.page.edit_form' && strpos($page_parameters['step'], 'layout_builder');
  }
  return FALSE;
}

/**
 * Implements hook_gin_lb_is_layout_builder_route_alter().
 *
 * Define a page manager edit form to be a layout builder route.
 */
function ghi_blocks_gin_lb_is_layout_builder_route_alter(&$gin_lb_is_layout_builder_route, $context) {
  if (ghi_blocks_is_layout_builder_route()) {
    $gin_lb_is_layout_builder_route = ghi_blocks_is_layout_builder_route();
  }
}

/**
 * Implements hook_plan_overview_query_arguments_alter().
 */
function ghi_blocks_plan_overview_query_arguments_alter(array &$query_args, $year) {
  if (!\Drupal::currentUser()->isAuthenticated()) {
    return;
  }
  $config = GlobalSettingsHelper::getConfig($year);
  if (!empty($config['use_latest_plan_data'])) {
    $query_args['version'] = 'latest';
  }
}

/**
 * Alter the meta tags for the current page.
 *
 * @param array $metatags
 *   The special meta tags to be added to the page.
 * @param array $context
 *   The context for the current meta tags being generated. Will contain the
 *   following:
 *   'entity' - The entity being processed; passed by reference.
 */
function ghi_blocks_metatags_alter(array &$metatags, array &$context) {
  /** @var \Drupal\ghi_blocks\Metatags\Metatags $ghi_metatags */
  $ghi_metatags = \Drupal::service('ghi_blocks.metatags');
  $ghi_metatags->alter($metatags, $context);
}

/**
 * Alter the meta tags for any page prior to page attachment.
 *
 * @param array $metatag_attachments
 *   An array of metatag objects to be attached to the current page.
 */
function ghi_blocks_metatags_attachments_alter(array &$metatag_attachments) {
  /** @var \Drupal\ghi_blocks\Metatags\Metatags $ghi_metatags */
  $ghi_metatags = \Drupal::service('ghi_blocks.metatags');
  $ghi_metatags->alterAttachments($metatag_attachments);
}
