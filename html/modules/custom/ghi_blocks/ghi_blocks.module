<?php

/**
 * @file
 * Contains hook implementations for the GHI Blocks module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\ghi_blocks\Interfaces\MultiStepFormBlockInterface;
use Drupal\ghi_blocks\Plugin\Block\GHIBlockBase;

/**
 * Implements hook_theme().
 */
function ghi_blocks_theme($existing, $type, $theme, $path) {
  return [
    'document_link_box' => [
      'render element' => 'document',
      'file' => 'ghi_blocks.theme.inc',
      'template' => 'document-link-box',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_item_list_alter() for form templates.
 */
function ghi_blocks_theme_suggestions_item_list_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['context']['plugin_id'])) {
    $id = str_replace('-', '_', Html::getId($variables['context']['plugin_id']));
    $suggestions[] = $hook . '__' . $id;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ghi_blocks_preprocess_block(&$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  /** @var \Drupal\ghi_blocks\Plugin\Block\GHIBlockBase $block */
  $block = $block_manager->createInstance($variables['plugin_id'], $variables['configuration']);
  if (!$block instanceof GHIBlockBase) {
    return;
  }
  // Set the title if needed.
  if ($block->shouldDisplayTitle() && array_key_exists('#title', $variables['content'])) {
    $variables['label'] = $variables['content']['#title'];
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function ghi_blocks_form_layout_builder_add_block_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $component = $form_state->get('layout_builder__component');
  $plugin = $component->getPlugin();
  if (!$plugin instanceof GHIBlockBase) {
    return;
  }
  $plugin->blockFormAlter($form, $form_state);
}

/**
 * Implements hook_FORM_ID_alter().
 */
function ghi_blocks_form_layout_builder_update_block_alter(array &$form, FormStateInterface $form_state, $form_id) {
  list($section_storage, $delta, , $uuid) = $form_state->getBuildInfo()['args'];
  $component = $section_storage->getSection($delta)->getComponent($uuid);
  $plugin = $component->getPlugin();
  if (!$plugin instanceof GHIBlockBase) {
    return;
  }
  $plugin->blockFormAlter($form, $form_state);
}

/**
 * Ajax cancel callback.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The ajax response object.
 */
function ghi_blocks_layout_builder_cancel_callback(array $form, FormStateInterface $form_state) {
  // Unset the stored form values.
  $form_key = $form_state->get('current_subform');
  $form_state->set($form_key, NULL);

  // Do the same for every form of multi step forms.
  $block = $form_state->getBuildInfo()['callback_object']->getCurrentComponent()->getPlugin();
  if ($block instanceof MultiStepFormBlockInterface) {
    foreach (array_keys($block->getSubforms()) as $form_key) {
      $form_state->set($form_key, NULL);
    }
  }

  // And close the modal.
  $response = new AjaxResponse();
  $response->addCommand(new CloseDialogCommand('#layout-builder-modal'));
  return $response;
}

/**
 * Implements hook_page_attachments().
 */
function ghi_blocks_page_attachments(array &$attachments) {
  if (ghi_blocks_is_layout_builder_route()) {
    $attachments['#attached']['library'][] = 'ghi_blocks/layout_builder_gin';
  }
}

/**
 * Returns true if the current route is a layout builder route.
 *
 * @return bool
 *   Returns true for layout builder routes.
 */
function ghi_blocks_is_layout_builder_route() {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (preg_match('/^(layout_builder\.([^.]+\.)?)/', $route_name)) {
    return TRUE;
  }
  return FALSE;
}
