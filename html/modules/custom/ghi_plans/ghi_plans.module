<?php

/**
 * @file
 * Contains hook implementations for the GHI Plans module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\ghi_base_objects\Helpers\BaseObjectHelper;
use Drupal\ghi_plans\Entity\GoverningEntity;
use Drupal\ghi_plans\Entity\Plan;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ghi_plans_entity_bundle_info_alter(array &$bundles) {
  $bundles['base_object']['plan']['class'] = Plan::class;
  $bundles['base_object']['plan']['label'] = t('Plan');
  $bundles['base_object']['governing_entity']['class'] = GoverningEntity::class;
  $bundles['base_object']['governing_entity']['label'] = t('Governing Entity');
}

/**
 * Implements hook_page_attachments().
 */
function ghi_plans_page_attachments(array &$page) {
  $cache = CacheableMetadata::createFromRenderArray($page);
  $page['#attached']['html_head_link'][] = [
    [
      'href' => 'https://fonts.googleapis.com/icon?family=Material+Icons',
      'rel' => 'stylesheet',
    ],
  ];
  // Apply updated caching information.
  $cache->applyTo($page);
}

/**
 * Implements hook_preprocess_page().
 */
function ghi_plans_preprocess_page(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'] ?? NULL;
  /** @var \Drupal\ghi_base_objects\Entity\BaseObjectInterface $base_object */
  $base_object = $node ? BaseObjectHelper::getBaseObjectFromNode($node) : NULL;
  if ($base_object && $base_object instanceof Plan) {
    $variables['#attached']['drupalSettings']['plan_settings'] = [
      'decimal_format' => $base_object->getDecimalFormat(),
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Selectively allow specific fields on edit pages of plan base objects.
 */
function ghi_plans_form_base_object_plan_edit_form_alter(&$form, FormStateInterface &$form_state) {
  $allow_fields = [
    'field_decimal_format',
    'field_footnotes',
    'field_link_to_fts',
    'field_max_admin_level',
    'field_operations_category',
    'field_plan_caseload',
    'field_plan_document_link',
    'field_plan_status',
    'field_plan_type_label_override',
    'field_plan_version_argument',
    'field_short_name',
    'field_visible_on_global_pages',
  ];
  foreach (Element::children($form) as $element_key) {
    if (!in_array($element_key, $allow_fields) && $form[$element_key]['#type'] != 'actions') {
      continue;
    }
    unset($form[$element_key]['#disabled']);
  }

  // Check for required fields with unset values, extract the default value
  // from the field config and set that instead. This is a UX addition,
  // applying only to existing items.
  // Currently supported widget types are textfields and select dropdowns.
  foreach (Element::children($form) as $element_key) {
    if (strpos($element_key, 'field_') !== 0 || !empty($form[$element_key]['#disabled'])) {
      continue;
    }
    $widget = &$form[$element_key]['widget'];
    if (empty($widget['#required'])) {
      continue;
    }
    /** @var \Drupal\field\FieldConfigInterface $field */
    $field = \Drupal::entityTypeManager()->getStorage('field_config')->load('base_object.plan.' . $widget['#field_name']);
    // Get the default value for the field. This is used to extract the path to
    // the widget value and to set the #default_value in case it is NULL.
    $default_widget_value = $field->get('default_value');
    if (array_key_exists('#theme', $widget) && $widget['#theme'] == 'field_multiple_value_form') {
      // Textfields.
      $ref = &$widget;
      while (is_array($default_widget_value) && array_key_exists(array_key_first($default_widget_value), $ref)) {
        $key = array_key_first($default_widget_value);
        $ref = &$ref[$key];
        $default_widget_value = $default_widget_value[$key];
      }
      if (!array_key_exists('#default_value', $ref) || $ref['#default_value'] === NULL) {
        $ref['#default_value'] = $default_widget_value;
      }
    }
    elseif (array_key_exists('#type', $widget) && $widget['#type'] == 'select' && empty($widget['#default_value'])) {
      // Select fields.
      $widget['#default_value'] = $default_widget_value[0]['value'];
    }
  }
}
