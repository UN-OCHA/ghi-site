<?php

/**
 * @file
 * Contains hook implementations for the GHI Templates module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\ghi_templates\PageTemplateInterface;
use Drupal\layout_builder\SectionStorageInterface;

/**
 * Implements hook_theme().
 */
function ghi_templates_theme() {
  $theme = [];
  $theme['page_template'] = [
    'render element' => 'elements',
    'file' => 'ghi_templates.theme.inc',
    'template' => 'page_template',
  ];
  return $theme;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ghi_templates_page_template_insert(PageTemplateInterface $entity) {
  $entity->setupTemplate();
}

/**
 * Implements hook_module_implements_alter().
 */
function ghi_templates_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'layout_builder_view_context_alter') {
    // Ensure that this module's implementation of hook_entity_view_alter() runs
    // last so that other modules that use this hook to render extra fields will
    // run before it.
    $group = $implementations['ghi_templates'];
    unset($implementations['ghi_templates']);
    $implementations['ghi_templates'] = $group;
  }
}

/**
 * Implements hook_layout_builder_view_context_alter().
 */
function ghi_templates_layout_builder_view_context_alter(array &$contexts, SectionStorageInterface $section_storage = NULL, $sample = FALSE) {

  // See if there is a context.
  $entity_context = $contexts['layout_builder.entity'] ?? ($contexts['entity'] ?? ($contexts['page_template'] ?? NULL));
  if (!$entity_context || !$entity_context->hasContextValue()) {
    return;
  }
  $entity = $entity_context->getContextValue();
  if (!$entity instanceof PageTemplateInterface) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $base_entity */
  $base_entity = $entity->field_entity_reference->entity;

  /** @var \Drupal\ghi_base_objects\Entity\BaseObjectInterface $base_object */
  $base_object = $entity->field_base_object->entity;

  if (!$entity->id() || $sample) {
    // This is the manage display form or some other config form with a sample
    // entity. We only want to make sure that we provide some dummy context so
    // that plan elements that depend on a base object can be selected.
    $types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
    $type = reset($types);
    $entity = \Drupal::service('layout_builder.sample_entity_generator')->get('node', $type->id());
    $context = EntityContext::fromEntity($entity, $type->label());
    $context->getContextDefinition()->addConstraint('Bundle', $type->getEntityTypeId());
    $contexts['node'] = $context;
  }
  else {
    // This is an actual entity page.
    $context = EntityContext::fromEntity($base_entity, $base_entity->getEntityType()->getBundleLabel());
    $context->getContextDefinition()->addConstraint('Bundle', $base_entity->bundle());
    $contexts['node'] = $context;

    $context = EntityContext::fromEntity($base_object, $base_object->label());
    $context->getContextDefinition()->addConstraint('Bundle', $base_object->getEntityTypeId());
    $contexts[$base_object->getUniqueIdentifier()] = $context;
  }
}

/**
 * Implements hook_layout_builder_ipe_links_alter().
 *
 * This adds additional links to the IPE action section.
 */
function ghi_templates_layout_builder_ipe_links_alter(array &$links, SectionStorageInterface $section_storage, EntityInterface $entity) {
  if (!$entity instanceof ContentEntityInterface) {
    // We only support this for content entites.
    return;
  }
  /** @var \Drupal\ghi_templates\TemplateLinkBuilder $template_link_builder */
  $template_link_builder = \Drupal::service('ghi_templates.link_builder');
  $template_links['export'] = $template_link_builder->buildExportLink($section_storage, $entity);
  $template_links['import'] = $template_link_builder->buildImportLink($section_storage, $entity);
  $template_links = array_filter($template_links);

  if (count($template_links)) {
    $links['template'] = [
      '#type' => 'dropbutton',
      '#links' => $template_links,
      '#attached' => [
        'library' => [
          'ghi_templates/import_page',
        ],
      ],
    ];
  }
}

/**
 * Returns true if the current route is a layout builder route.
 *
 * @return bool
 *   Returns true for layout builder routes.
 */
function ghi_templates_is_layout_builder_route() {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (!$route_name) {
    return FALSE;
  }
  return $route_name == 'ghi_templates.entity.page_config.export' || $route_name == 'ghi_templates.entity.page_config.import';
}

/**
 * Implements hook_gin_lb_is_layout_builder_route_alter().
 *
 * Define a the export/import forms to be a layout builder route.
 */
function ghi_templates_gin_lb_is_layout_builder_route_alter(&$gin_lb_is_layout_builder_route, $context) {
  if (ghi_templates_is_layout_builder_route()) {
    $gin_lb_is_layout_builder_route = ghi_templates_is_layout_builder_route();
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * Mostly copied from Gin LB to. Required to support common styles in the forms
 * when rendered from the backend theme.
 */
function ghi_templates_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  $add_suggestions = FALSE;
  if (ghi_templates_is_layout_builder_route()) {
    $add_suggestions = TRUE;
  }

  $kill_switch = FALSE;
  // Allow elements to declare whether they want to be rendered by Gin LB.
  if (array_key_exists('element', $variables) && is_array($variables['element']) && array_key_exists('#gin_lb_form_element', $variables['element'])) {
    $add_suggestions = $variables['element']['#gin_lb_form_element'];
    $kill_switch = !$add_suggestions;
  }
  elseif (array_key_exists('gin_lb_theme_suggestions', $variables) && $variables['gin_lb_theme_suggestions'] !== NULL) {
    $add_suggestions = $variables['gin_lb_theme_suggestions'];
  }

  // Allow other modules to chime in.
  \Drupal::moduleHandler()->alter('gin_lb_add_suggestions', $add_suggestions, $variables, $hook);
  if (!$kill_switch && (isset($variables['element']['#gin_lb_form']) || $add_suggestions === TRUE)) {

    // Fix form element suggestions when they are not implemented in the theme.
    if (empty($suggestions) && !empty($variables['theme_hook_original'])) {
      $suggestions = [$variables['theme_hook_original']];
    }

    $additional_suggestions = [];
    foreach ($suggestions as $suggestion) {
      $additional_suggestions[] = $suggestion . '__gin_lb';
    }
    $suggestions[] = $hook . '__gin_lb';
    $suggestions = array_merge($suggestions, $additional_suggestions);
  }

}
